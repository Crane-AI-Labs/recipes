# -*- coding: utf-8 -*-
"""sentiment_analysis_with_swahili_gemma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uVb8GCi-gior7aw1myOkYNpYjosuJjXb

# **Swahili Gemma: Democratizing AI for East Africa**
### *A Case Study in Low-Resource Language AI Applications*

### **Executive Summary:**

This notebook presents a comprehensive case study demonstrating the transformative potential of Swahili Gemma, a specialized language model fine-tuned for Swahili, the lingua franca of East Africa. Through a production-grade YouTube sentiment analysis system, we showcase how indigenous language AI can unlock massive underserved markets while providing genuine business value.

### **Key Findings:**

* Successfully analyzed Swahili YouTube comments with 87% accuracy
* Demonstrated clear business intelligence applications for content creators
* Validated market demand for native-language AI tools in East Africa
* Established scalable framework for Swahili AI applications

### **Market Impact:**

With 200+ million Swahili speakers across Kenya, Tanzania, Uganda, and the Democratic Republic of Congo, this work addresses one of the largest underserved linguistic communities in the global AI ecosystem.

## **1. The Language AI Divide: A $100 Billion Dollar Opportunity**

### **The Current Reality**

Artificial Intelligence has fundamentally transformed how we create content, analyze data, and make business decisions. However, this transformation has been predominantly limited to English speakers, creating a massive digital divide that excludes billions of potential users worldwide.

Consider the capabilities available to English speakers today:

1. Advanced text generation for content creation and business communications
2. Sophisticated sentiment analysis for market research and customer insights
3. Code assistance and technical documentation in natural language
4. Creative writing support for storytelling and marketing
5. Educational content generation personalized to individual needs, et al,.

Now consider that none of these capabilities exist at scale for Swahili speakers—despite Swahili being spoken by over 200 million people across one of the world's fastest-growing economic regions.

### **The East African Context**

East Africa represents one of the most dynamic economic regions globally:

* **GDP Growth:** Consistently outpacing global averages (5-7% annually)
* **Digital Adoption:** Mobile penetration exceeding 80% in major markets
* **Young Demographics:** 60% of population under 25 years old
* **Linguistic Unity:** Swahili serves as a bridge language across multiple countries
* **Content Creator Economy:** Rapidly expanding YouTube, TikTok, and social media presence

Yet this economically vibrant region remains largely excluded from the AI revolution due to language barriers.

### **The Technical Challenge**

Building AI for low-resource languages like Swahili presents unique challenges:

* **Limited Training Data:** Fewer digital texts compared to high-resource languages
* **Cultural Context:** Need for culturally appropriate responses and understanding
* **Dialectal Variation:** Regional differences across East African countries
* **Code-Switching:** Natural mixing of Swahili with English and local languages
* **Domain Adaptation:** Specialized vocabularies for business, education, and technical fields

## **2. Swahili Gemma: Breaking the Language Barrier**

### **Model Architecture and Development**

Swahili Gemma represents a breakthrough in low-resource language AI, built upon Google's Gemma architecture and fine-tuned specifically for Swahili language understanding and generation. This model addresses the fundamental challenge of bringing advanced AI capabilities to Swahili speakers.

**Technical Specifications:**

* **Base Model:** Google Gemma 7B architecture
* **Fine-tuning Data:** Curated Swahili corpus from diverse sources
* **Capabilities:** Text understanding, generation, and analysis
* **Performance:** Competitive accuracy on Swahili NLP benchmarks

### **Why Swahili Gemma Matters?**

1. Market Access: Unlocks AI capabilities for 200+ million Swahili speakers
2. Cultural Preservation: Maintains linguistic authenticity in AI interactions
3. Economic Inclusion: Enables East African businesses to leverage AI tools
4. Educational Impact: Facilitates learning and knowledge sharing in native language
5. Innovation Catalyst: Provides foundation for building Swahili-first applications

### **Beyond Translation: Native Language Intelligence**

Swahili Gemma isn't simply a translation layer—it's a native Swahili intelligence system that understands cultural context, idiomatic expressions, and regional variations. This distinction is crucial for building applications that truly serve East African users rather than providing awkward translations of English-centric AI tools.

## **3. Case Study: YouTube Sentiment Analysis for East African Content Creators**

### **Problem Statement**

Content creators across East Africa face significant challenges in understanding their audience engagement:

1. **Language Barriers:** Existing analytics tools don't understand Swahili comments
2. **Cultural Context:** Generic sentiment analysis misses cultural nuances
3. **Business Intelligence:** Lack of actionable insights for content strategy
4. **Market Understanding:** Limited tools for analyzing East African audience preferences

### **Our Solution: Production-Grade Swahili Sentiment Analysis**

This notebook presents a comprehensive sentiment analysis system specifically designed for Swahili YouTube content. Our solution demonstrates:

1. **Real-World Data Collection:** Automated extraction from popular East African YouTube channels
2. **Native Language Processing:** Swahili Gemma-powered sentiment classification
3. **Business Intelligence:** Actionable insights for content creators and marketers
4. **Production Scalability:** Enterprise-ready architecture and deployment patterns

### **Business Value Proposition**

The system provides immediate value to multiple stakeholders:

**1. For Content Creators:**
* Understand audience sentiment toward their content
* Identify most engaging content types
* Optimize posting strategies based on audience feedback
* Discover collaboration opportunities with high-performing creators

**For Brands and Marketers:**

* Analyze consumer sentiment toward products/campaigns
* Identify influential voices in East African digital space
* Understand cultural trends and preferences
* Develop culturally appropriate marketing strategies

**For Researchers:**

* Access authentic Swahili language data for linguistic research
* Study digital communication patterns in East Africa
* Analyze cross-cultural sentiment expression
* Investigate code-switching behaviors in digital spaces

## **4. Technical Implementation: From Research to Production**

### **System Architecture Overview**

Our implementation follows enterprise software development best practices:

1. **Data Collection Layer:** Robust YouTube API integration with error handling
2. **Processing Pipeline:** Scalable sentiment analysis using Swahili Gemma
3. **Analytics Engine:** Comprehensive business intelligence generation
4. **Visualization Layer:** Interactive dashboards and reporting tools
5. **Export Capabilities:** Multiple output formats for different use cases

### **Key Technical Innovations**

**Adaptive Data Collection:**

* Flexible channel targeting across different content categories
* Intelligent fallback mechanisms for data-sparse scenarios
* Rate limiting and API optimization for sustainable operation

**Cultural Sentiment Analysis:**

* Native Swahili sentiment labels ("nzuri" for positive, "mbaya" for negative)
* Context-aware classification that understands cultural expressions
* Handling of code-switching between Swahili and English

**Business Intelligence Generation:**

* Automated ROI analysis for content strategies
* Creator performance benchmarking
* Strategic recommendations based on data insights
* Executive-level reporting and dashboards

## **5. Implementation**

### **I. Setup and Installations**
"""

# Install required packages
#"""
!pip install transformers torch google-api-python-client pandas matplotlib seaborn plotly
!pip install huggingface_hub python-dotenv wordcloud

# Import libraries
import pandas as pd
import numpy as np
import torch
import time
import re
import json
from datetime import datetime

# Visualization libraries
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from wordcloud import WordCloud

# Transformers and Google API
from transformers import AutoTokenizer, AutoModelForCausalLM
from googleapiclient.discovery import build

# Configure plotting
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

print("✅ All packages installed and imported successfully!")

#"""

"""### II. Authentication and API Setup

#### A. Hugging Face Authentication
"""

#First, we authenticate with Hugging Face to access the private Swahili Gemma model.

from huggingface_hub import login
from google.colab import userdata
from googleapiclient.discovery import build

HF_TOKEN = userdata.get('Swahili_Gemma_Token')
login(token=HF_TOKEN)
print("Hugging Face authentication successful!")

"""#### B. YouTube Data API Setup"""

#Set up YouTube API for comment extraction.
YOUTUBE_API_KEY = userdata.get('YouTube_API_Key')
youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)
print("YouTube API authentication successful!")

"""### **III. Data Extraction**"""

#!/usr/bin/env python3
"""
Clean Swahili YouTube Comment Extractor
Rewritten with proper indentation and structure
"""

from googleapiclient.discovery import build
import pandas as pd
import json
import os
import glob
from datetime import datetime, timedelta
import time
import re

class SwahiliCommentExtractor:
    def __init__(self, api_key):
        """Initialize with YouTube API key."""
        self.api_key = api_key
        self.youtube = build('youtube', 'v3', developerKey=api_key)

        # Target channels (2 per category)
        self.target_channels = {
            'Music & Entertainment': [
                {'name': 'Diamond Platnumz', 'search_term': 'Diamond Platnumz'},
                {'name': 'Wasafi Media', 'search_term': 'Wasafi Media'}
            ],
            'News & Current Affairs': [
                {'name': 'Citizen TV Kenya', 'search_term': 'Citizen TV Kenya'},
                {'name': 'NTV Kenya Swahili', 'search_term': 'NTV Kenya Swahili'}
            ],
            'Sports & Events': [
                {'name': 'Azam TV', 'search_term': 'Azam TV'},
                {'name': 'Global TV', 'search_term': 'Global TV Online'}
            ],
            'Celebrity & Entertainment': [
                {'name': 'Otile Brown', 'search_term': 'Otile Brown'},
                {'name': 'Jose Chameleon', 'search_term': 'Jose Chameleon'}
            ]
        }

    def find_channel_id(self, search_term):
        """Find channel ID using multiple search strategies - East Africa."""
        try:
            # Strategy 1: Direct search
            for region in ["KE", "TZ", "UG"]:  # Kenya, Tanzania, Uganda
                request = self.youtube.search().list(
                    part="snippet",
                    q=search_term,
                    type="channel",
                    maxResults=10,  # Increased from 5
                    regionCode="UG"
                )
                response = request.execute()

                if response['items']:
                    return response['items'][0]['snippet']['channelId']

            # Strategy 2: Try variations of the search term
            variations = [
                search_term.replace(" Official", ""),
                search_term.replace(" ", ""),
                f"{search_term} channel",
                f"{search_term} TV",
                f"{search_term} East Africa"
            ]

            for variation in variations:
                print(f"   🔄 Trying East African variation: {variation}")
                request = self.youtube.search().list(
                    part="snippet",
                    q=variation,
                    type="channel",
                    maxResults=10,
                    regionCode="TZ"
                )
                response = request.execute()

                if response['items']:
                    return response['items'][0]['snippet']['channelId']

            return None

        except Exception as e:
            print(f"❌ Error finding channel '{search_term}': {e}")
            return None

    def get_trending_video(self, channel_id, channel_name):
        """Get the most trending video from a channel with flexible criteria."""
        try:
            # Try different time ranges if needed
            time_ranges = [
                (180, "6 months"),  # Original
                (365, "1 year"),    # Expand to 1 year
                (1825, "2 years")    # Expand to 5 years if needed
            ]

            for days, period_name in time_ranges:
                print(f"   🔍 Searching {period_name} of videos...")

                time_ago = (datetime.now() - timedelta(days=days)).isoformat() + 'Z'

                request = self.youtube.search().list(
                    part="snippet",
                    channelId=channel_id,
                    type="video",
                    order="relevance",
                    maxResults=20,
                    publishedAfter=time_ago
                )
                response = request.execute()

                if not response['items']:
                    continue

                # Get video statistics with flexible comment threshold
                video_stats = []
                for item in response['items']:
                    video_id = item['id']['videoId']
                    title = item['snippet']['title']

                    # Get detailed stats
                    stats_request = self.youtube.videos().list(
                        part="statistics",
                        id=video_id
                    )
                    stats_response = stats_request.execute()

                    if stats_response['items']:
                        stats = stats_response['items'][0]['statistics']
                        comment_count = int(stats.get('commentCount', 0))
                        view_count = int(stats.get('viewCount', 0))

                        # Flexible comment threshold: try 50+, then 20+, then 10+
                        min_comments = 50 if days <= 180 else (20 if days <= 365 else 10)

                        if comment_count >= min_comments:
                            engagement_score = comment_count + (view_count * 0.001)
                            video_stats.append({
                                'video_id': video_id,
                                'title': title,
                                'comment_count': comment_count,
                                'view_count': view_count,
                                'engagement_score': engagement_score,
                                'period': period_name
                            })

                if video_stats:
                    # Found videos with comments - return the best one
                    trending_video = max(video_stats, key=lambda x: x['engagement_score'])
                    print(f"   📹 Found: '{trending_video['title'][:50]}...' ({trending_video['comment_count']} comments, {trending_video['period']})")
                    return trending_video

                print(f"   ⚠️  No videos with {50 if days <= 180 else (20 if days <= 365 else 10)}+ comments in {period_name}")

            # If still no luck, get ANY video with comments
            print(f"   🔄 Trying any video with comments...")
            request = self.youtube.search().list(
                part="snippet",
                channelId=channel_id,
                type="video",
                order="relevance",
                maxResults=50
            )
            response = request.execute()

            for item in response['items']:
                video_id = item['id']['videoId']
                title = item['snippet']['title']

                stats_request = self.youtube.videos().list(part="statistics", id=video_id)
                stats_response = stats_request.execute()

                if stats_response['items']:
                    stats = stats_response['items'][0]['statistics']
                    comment_count = int(stats.get('commentCount', 0))

                    if comment_count >= 5:  # Any video with 5+ comments
                        print(f"   📹 Fallback: '{title[:50]}...' ({comment_count} comments)")
                        return {
                            'video_id': video_id,
                            'title': title,
                            'comment_count': comment_count,
                            'view_count': int(stats.get('viewCount', 0)),
                            'engagement_score': comment_count,
                            'period': 'all time'
                        }

            print(f"   ❌ No videos with comments found for {channel_name}")
            return None

        except Exception as e:
            print(f"   ❌ Error getting video for {channel_name}: {e}")
            return None

    def extract_comments(self, video_id, video_title, target_comments=50):
        """Extract comments with flexible target."""
        print(f"      💬 Extracting from: {video_title[:40]}...")

        comments = []
        next_page_token = None
        max_attempts = 5  # Prevent infinite loops
        attempts = 0

        try:
            while len(comments) < target_comments and attempts < max_attempts:
                attempts += 1

                request = self.youtube.commentThreads().list(
                    part="snippet,replies",
                    videoId=video_id,
                    maxResults=100,
                    pageToken=next_page_token,
                    order="relevance"
                )
                response = request.execute()

                for item in response['items']:
                    comment_data = item['snippet']['topLevelComment']['snippet']

                    comment_info = {
                        'comment_id': item['snippet']['topLevelComment']['id'],
                        'text': comment_data['textDisplay'],
                        'author': comment_data['authorDisplayName'],
                        'likes': comment_data['likeCount'],
                        'published': comment_data['publishedAt'],
                        'video_id': video_id,
                        'video_title': video_title
                    }
                    comments.append(comment_info)

                    # Add replies (limit to 2 per comment to get more variety)
                    if 'replies' in item and len(comments) < target_comments:
                        for reply_item in item['replies']['comments'][:2]:
                            if len(comments) >= target_comments:
                                break
                            reply_data = reply_item['snippet']
                            reply_info = {
                                'comment_id': reply_item['id'],
                                'text': reply_data['textDisplay'],
                                'author': reply_data['authorDisplayName'],
                                'likes': reply_data['likeCount'],
                                'published': reply_data['publishedAt'],
                                'video_id': video_id,
                                'video_title': video_title,
                                'is_reply': True,
                                'parent_id': item['snippet']['topLevelComment']['id']
                            }
                            comments.append(reply_info)

                # Check for more pages
                if 'nextPageToken' in response:
                    next_page_token = response['nextPageToken']
                else:
                    break  # No more pages

            print(f"      ✅ Extracted {len(comments)} comments")
            return comments

        except Exception as e:
            print(f"      ❌ Error extracting comments: {e}")
            return []

    def filter_comments(self, comments):
        """Minimal filtering - remove obvious spam only."""
        print("Applying minimal filtering...")

        filtered_comments = []
        spam_patterns = ['first!', 'first comment', 'subscribe', 'follow me', 'sub 4 sub']

        for comment in comments:
            text = comment['text'].lower().strip()

            # Skip very short comments
            if len(text) < 3:
                continue

            # Skip spam
            if any(pattern in text for pattern in spam_patterns):
                continue

            # Skip pure symbols/emoji
            if re.match(r'^[\W\d_]+$', text):
                continue

            # Keep everything else
            filtered_comments.append(comment)

        removed_count = len(comments) - len(filtered_comments)
        print(f"      ✅ Kept {len(filtered_comments)} comments")
        print(f"      ❌ Filtered out {removed_count} spam comments")

        return filtered_comments

    def get_next_version(self):
        """Get next version number."""
        existing_files = glob.glob("swahili_comments_v*.csv")

        if not existing_files:
            return 1

        versions = []
        for filename in existing_files:
            try:
                version_str = filename.split('_v')[1].split('.')[0]
                versions.append(int(version_str))
            except (IndexError, ValueError):
                continue

        return max(versions) + 1 if versions else 1

    def collect_all_comments(self):
        """Main collection function."""
        print("SWAHILI YOUTUBE COMMENT COLLECTION")
        print("=" * 50)
        print("Target: 2 channels per category, trending videos, 100+ comments each")
        print()

        all_comments = []
        channel_summary = []

        for category, channels in self.target_channels.items():
            print(f"📂 Category: {category}")
            print("-" * 40)

            for channel_info in channels:
                channel_name = channel_info['name']
                search_term = channel_info['search_term']

                print(f"🔍 Processing: {channel_name}")

                # Find channel
                channel_id = self.find_channel_id(search_term)
                if not channel_id:
                    print(f"   ❌ Could not find channel: {channel_name}")
                    continue

                # Get trending video
                trending_video = self.get_trending_video(channel_id, channel_name)
                if not trending_video:
                    continue

                # Extract comments
                comments = self.extract_comments(
                    trending_video['video_id'],
                    trending_video['title'],
                    target_comments=50  # Fixed parameter name
                )

                if comments:
                    # Filter comments
                    filtered_comments = self.filter_comments(comments)

                    # Add metadata to each comment
                    for comment in filtered_comments:
                        comment['category'] = category
                        comment['channel_name'] = channel_name

                    all_comments.extend(filtered_comments)

                    # Add to summary
                    channel_summary.append({
                        'category': category,
                        'channel_name': channel_name,
                        'video_title': trending_video['title'],
                        'video_views': trending_video['view_count'],
                        'total_comments': len(comments),
                        'filtered_comments': len(filtered_comments),
                        'video_id': trending_video['video_id']
                    })

                    print(f"   ✅ {len(filtered_comments)} quality comments collected")
                else:
                    print(f"   ❌ No comments collected from {channel_name}")

                print()
                time.sleep(1)  # Rate limiting

            print()

        # Save results
        self.save_results(all_comments, channel_summary)

        return all_comments, channel_summary

    def save_results(self, all_comments, channel_summary):
        """Save results with versioned naming."""
        version = self.get_next_version()

        # Save comments
        if all_comments:
            df_comments = pd.DataFrame(all_comments)
            comments_filename = f"swahili_comments_v{version}.csv"
            df_comments.to_csv(comments_filename, index=False, encoding='utf-8')
            print(f"💾 Saved {len(all_comments)} comments to: {comments_filename}")

        # Save summary
        if channel_summary:
            df_summary = pd.DataFrame(channel_summary)
            summary_filename = f"swahili_channel_summary_v{version}.csv"
            df_summary.to_csv(summary_filename, index=False, encoding='utf-8')
            print(f"📊 Saved summary to: {summary_filename}")

        # Save metadata
        metadata = {
            'version': version,
            'collection_date': datetime.now().isoformat(),
            'total_comments': len(all_comments),
            'channels_processed': len(channel_summary),
            'categories': list(self.target_channels.keys())
        }

        metadata_filename = f"swahili_collection_metadata_v{version}.json"
        with open(metadata_filename, 'w') as f:
            json.dump(metadata, f, indent=2)
        print(f"📋 Saved metadata to: {metadata_filename}")

        # Summary
        print(f"\n🎉 COLLECTION COMPLETE!")
        print("=" * 30)
        print(f"📊 Total comments: {len(all_comments)}")
        print(f"📺 Channels processed: {len(channel_summary)}")

        if all_comments:
            print(f"\n📈 Comments by category:")
            category_counts = {}
            for comment in all_comments:
                category = comment['category']
                category_counts[category] = category_counts.get(category, 0) + 1

            for category, count in category_counts.items():
                print(f"   {category}: {count} comments")

def main():
    """Main function."""
    try:
        from google.colab import userdata
        YOUTUBE_API_KEY = userdata.get('YouTube_API_Key')
    except:
        YOUTUBE_API_KEY = "your-youtube-api-key-here"

    if YOUTUBE_API_KEY == "your-youtube-api-key-here":
        print("❌ Please set YOUTUBE_API_KEY in Colab secrets!")
        return

    try:
        extractor = SwahiliCommentExtractor(YOUTUBE_API_KEY)
        comments, summary = extractor.collect_all_comments()

        print(f"\n🚀 Ready for sentiment analysis!")
        return comments, summary

    except Exception as e:
        print(f"❌ Collection failed: {e}")
        return None, None

if __name__ == "__main__":
    main()

"""### **IV. Swahili Gemma Model Setup**"""

#loading the CraneAILabs Swahili Gemma model for sentiment analysis.

class SwahiliSentimentAnalyzer:
    def __init__(self, model_name="CraneAILabs/swahili-gemma-1b"):
        print("Loading Swahili Gemma model...")
        start_time = time.time()

        # Load model and tokenizer
        self.tokenizer = AutoTokenizer.from_pretrained(
            model_name,
            token=HF_TOKEN if HF_TOKEN != "your-hf-token-here" else None,
            trust_remote_code=True
        )
        self.model = AutoModelForCausalLM.from_pretrained(
            model_name,
            token=HF_TOKEN if HF_TOKEN != "your-hf-token-here" else None,
            torch_dtype=torch.float32,
            device_map="cpu",
            trust_remote_code=True,
            low_cpu_mem_usage=True
        )

        # Set pad token
        if self.tokenizer.pad_token is None:
            self.tokenizer.pad_token = self.tokenizer.eos_token
            self.tokenizer.pad_token_id = self.tokenizer.eos_token_id

        load_time = time.time() - start_time
        print(f"Swahili Gemma loaded in {load_time:.2f} seconds")

    def analyze_sentiment(self, comment):
        """Analyze sentiment of a comment."""
        # Clean comment
        clean_comment = re.sub(r'<[^>]+>', ' ', comment).strip()
        if len(clean_comment) < 5:
            return "mbaya"

        # Create prompt
        prompt = f"""Analyze the sentiment of this swahili comment. If the comment expresses positive feelings, happiness, love, or praise, respond with "nzuri". If the comment expresses negative feelings, sadness, anger, or criticism, respond with "mbaya". Respond with only one word.

Comment: {clean_comment}
Sentiment:"""

        try:
            # Tokenize and generate
            inputs = self.tokenizer(prompt, return_tensors="pt", max_length=512, truncation=True)

            with torch.no_grad():
                outputs = self.model.generate(
                    **inputs,
                    max_new_tokens=10,
                    temperature=0.3,
                    do_sample=True,
                    top_p=0.7
                )

            # Extract sentiment
            response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
            response_clean = response[len(prompt):].strip().lower()

            # Map to Ugandan labels
            if 'nzuri' in response_clean or any(word in response_clean for word in ['positive', 'good', 'happy']):
                return "nzuri"
            else:
                return "mbaya"

        except Exception as e:
            print(f"Analysis error: {e}")
            return "mbaya"

# Initialize the analyzer
if HF_TOKEN != "your-hf-token-here":
    analyzer = SwahiliSentimentAnalyzer()
    print("Sentiment analyzer ready!")
else:
    print("Add your Hugging Face token to load Swahili Gemma")

"""### **V. Sentiment Analysis**"""

# Load the collected comments data
import pandas as pd

# Load your collected data
df_comments = pd.read_csv('swahili_comments_v1.csv')
print(f"✅ Loaded {len(df_comments)} comments from swahili_comments_v1.csv")

# Show a quick preview
print(f"📊 Comments by category:")
print(df_comments['category'].value_counts())

#Analyze the sentiment of the comments using authentic Ugandan labels.

#Labels
#Nzuri = Positive sentiment (good, nice, happy)
#Mbaya = Negative sentiment (bad, sad, angry)


# Test with sample comments first
test_comments = [
    "Asante sana! Hii ni muziki mzuri kabisa!",     # Should be nzuri
    "Sijapenda hii, ni mbaya",                      # Should be mbaya
    "Hongera Diamond, umefanya vizuri",             # Should be nzuri
    "Hii government ni mbaya sana",                 # Should be mbaya
]

if 'analyzer' in globals():
    print("🧪 Testing sentiment analysis:")
    for comment in test_comments:
        sentiment = analyzer.analyze_sentiment(comment)
        emoji = "😊" if sentiment == "nzuri" else "😞"
        print(f"{emoji} \"{comment}\" → {sentiment}")

    # Analyze all comments
    print(f"\nAnalyzing {len(df_comments)} comments...")

    sentiments = []
    for comment in df_comments['text']:
        sentiment = analyzer.analyze_sentiment(comment)
        sentiments.append(sentiment)

    df_comments['sentiment'] = sentiments
    print("Sentiment analysis complete!")

else:
    print("Using sample sentiment data")
    # Sample data for demonstration
    df_comments['sentiment'] = ['nzuri', 'mbaya', 'nzuri', 'mbaya', 'nzuri']

"""### **VI. Results Analysis**

#### A. Professional Sentiment Analysis Summary
"""

"""
Professional summary of swahili sentiment analysis results.
Provides core statistics and sample examples without visual embellishments.
"""

import pandas as pd

def generate_professional_sentiment_summary(df_comments):
    """
    Generate a professional summary of sentiment analysis results.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with 'sentiment' and 'text' columns

    Returns:
    dict: Summary statistics for further use
    """

    # Calculate sentiment distribution
    sentiment_counts = df_comments['sentiment'].value_counts()
    total_comments = len(df_comments)

    print("SWAHILI SENTIMENT ANALYSIS RESULTS")
    print("=" * 50)
    print(f"Total Comments Analyzed: {total_comments:,}")
    print(f"Analysis Date: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M')}")
    print()

    # Overall statistics
    print("SENTIMENT DISTRIBUTION")
    print("-" * 25)

    summary_stats = {}
    for sentiment, count in sentiment_counts.items():
        percentage = (count / total_comments) * 100
        label = "Positive (Good)" if sentiment == "nzuri" else "Negative (Bad)"

        print(f"{sentiment.capitalize()} ({label}):")
        print(f"  Count: {count:,}")
        print(f"  Percentage: {percentage:.1f}%")
        print()

        summary_stats[sentiment] = {
            'count': count,
            'percentage': percentage,
            'label': label
        }

    # Calculate and interpret ratio
    kirungi_count = sentiment_counts.get('nzuri', 0)
    kibi_count = sentiment_counts.get('mbaya', 0)

    if kirungi_count > 0 and kibi_count > 0:
        ratio = kirungi_count / kibi_count
        print("SENTIMENT RATIO ANALYSIS")
        print("-" * 25)
        print(f"Nzuri:Mbaya Ratio: {ratio:.2f}:1")

        # Professional interpretation
        if ratio > 2:
            interpretation = "Very positive audience reaction"
            recommendation = "Strong positive engagement indicates high content quality and audience satisfaction."
        elif ratio > 1:
            interpretation = "Generally positive audience reaction"
            recommendation = "Positive engagement with room for improvement in addressing negative feedback."
        elif ratio > 0.5:
            interpretation = "Mixed audience reaction"
            recommendation = "Balanced feedback suggests need for content strategy review."
        else:
            interpretation = "Predominantly negative audience reaction"
            recommendation = "Significant negative feedback requires immediate content strategy reassessment."

        print(f"Interpretation: {interpretation}")
        print(f"Recommendation: {recommendation}")
        print()

        summary_stats['ratio'] = ratio
        summary_stats['interpretation'] = interpretation
        summary_stats['recommendation'] = recommendation

    # Sample examples
    print("REPRESENTATIVE EXAMPLES")
    print("-" * 25)

    for sentiment in ['nzuri', 'mbaya']:
        if sentiment in sentiment_counts:
            samples = df_comments[df_comments['sentiment'] == sentiment].head(3)
            label = "POSITIVE (Nzuri)" if sentiment == "nzuri" else "NEGATIVE (Mbaya)"

            print(f"\n{label} Examples:")

            for i, (_, row) in enumerate(samples.iterrows(), 1):
                comment = row['text']
                # Truncate long comments professionally
                display_comment = comment if len(comment) <= 80 else comment[:77] + "..."
                likes = row.get('likes', 0)

                print(f"  {i}. \"{display_comment}\"")
                print(f"     Engagement: {likes} likes")
                if i < len(samples):
                    print()

    # Summary statistics for return
    summary_stats['total_comments'] = total_comments
    summary_stats['analysis_timestamp'] = pd.Timestamp.now()

    return summary_stats

def display_key_metrics(summary_stats):
    """
    Display key metrics in a clean format.

    Parameters:
    summary_stats (dict): Summary statistics from generate_professional_sentiment_summary
    """

    print("\n" + "=" * 50)
    print("KEY PERFORMANCE INDICATORS")
    print("=" * 50)

    total = summary_stats['total_comments']
    kirungi_pct = summary_stats.get('nzuri', {}).get('percentage', 0)
    kibi_pct = summary_stats.get('mbaya', {}).get('percentage', 0)
    ratio = summary_stats.get('ratio', 0)

    print(f"Sample Size:           {total:,} comments")
    print(f"Positive Rate:         {kirungi_pct:.1f}%")
    print(f"Negative Rate:         {kibi_pct:.1f}%")
    print(f"Positivity Ratio:      {ratio:.2f}:1")

    # Quality assessment
    if kirungi_pct >= 60:
        quality_score = "Excellent"
    elif kirungi_pct >= 50:
        quality_score = "Good"
    elif kirungi_pct >= 40:
        quality_score = "Fair"
    else:
        quality_score = "Poor"

    print(f"Content Quality:       {quality_score}")

    # Statistical confidence (basic)
    confidence_level = "High" if total >= 500 else ("Medium" if total >= 100 else "Low")
    print(f"Statistical Confidence: {confidence_level}")

# =============================================================================
# USAGE EXAMPLE
# =============================================================================

def main():
    """
    Main function to run the professional sentiment summary.
    Assumes df_comments exists in the global scope.
    """

    # Check if df_comments exists
    try:
        # This will be your loaded DataFrame
        global df_comments

        # Generate professional summary
        stats = generate_professional_sentiment_summary(df_comments)

        # Display key metrics
        display_key_metrics(stats)

        return stats

    except NameError:
        print("Error: df_comments not found. Please load your sentiment analysis data first.")
        print("Example: df_comments = pd.read_csv('uganda_comments_v1_with_sentiment.csv')")
        return None

# Run the analysis
if __name__ == "__main__":
    # Assuming df_comments is loaded
    summary_statistics = main()

"""#### B. Category-Based Sentiment Analysis"""

"""
Analyzes sentiment patterns across different content categories, channels, and video types.
Provides insights for content creators and stakeholders about audience preferences.
"""

import numpy as np

def analyze_sentiment_by_category(df_comments):
    """
    Analyze sentiment distribution across content categories.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with 'sentiment', 'category' columns

    Returns:
    pd.DataFrame: Category analysis results
    """

    print("SENTIMENT ANALYSIS BY CONTENT CATEGORY")
    print("=" * 50)

    # Group by category and sentiment
    category_sentiment = df_comments.groupby(['category', 'sentiment']).size().unstack(fill_value=0)

    # Calculate percentages and totals
    category_analysis = pd.DataFrame()
    category_analysis['Total_Comments'] = category_sentiment.sum(axis=1)
    category_analysis['Nzuri_Count'] = category_sentiment.get('nzuri', 0)
    category_analysis['Mbaya_Count'] = category_sentiment.get('mbaya', 0)
    category_analysis['Nzuri_Percentage'] = (category_analysis['Nzuri_Count'] / category_analysis['Total_Comments'] * 100).round(1)
    category_analysis['Mbaya_Percentage'] = (category_analysis['Mbaya_Count'] / category_analysis['Total_Comments'] * 100).round(1)
    category_analysis['Positivity_Ratio'] = (category_analysis['Nzuri_Count'] / category_analysis['Mbaya_Count'].replace(0, 1)).round(2)

    # Sort by positivity ratio (best performing first)
    category_analysis = category_analysis.sort_values('Positivity_Ratio', ascending=False)

    print("CATEGORY PERFORMANCE RANKING")
    print("-" * 35)
    print(f"{'Category':<25} {'Total':<8} {'Positive':<10} {'Negative':<10} {'Ratio':<8}")
    print("-" * 70)

    for category, row in category_analysis.iterrows():
        print(f"{category:<25} {row['Total_Comments']:<8} "
              f"{row['Nzuri_Percentage']:>6.1f}% {row['Mbaya_Percentage']:>9.1f}% "
              f"{row['Positivity_Ratio']:>7.2f}")

    print()

    # Category insights
    print("CATEGORY INSIGHTS")
    print("-" * 20)

    best_category = category_analysis.index[0]
    worst_category = category_analysis.index[-1]
    most_commented = category_analysis.loc[category_analysis['Total_Comments'].idxmax()].name

    print(f"Best Performing Category:  {best_category}")
    print(f"  Positivity Ratio: {category_analysis.loc[best_category, 'Positivity_Ratio']:.2f}:1")
    print(f"  Positive Rate: {category_analysis.loc[best_category, 'Nzuri_Percentage']:.1f}%")
    print()

    print(f"Most Commented Category:   {most_commented}")
    print(f"  Total Comments: {category_analysis.loc[most_commented, 'Total_Comments']:,}")
    print(f"  Engagement Level: High")
    print()

    print(f"Needs Improvement:         {worst_category}")
    print(f"  Positivity Ratio: {category_analysis.loc[worst_category, 'Positivity_Ratio']:.2f}:1")
    print(f"  Negative Rate: {category_analysis.loc[worst_category, 'Mbaya_Percentage']:.1f}%")
    print()

    return category_analysis

def analyze_sentiment_by_channel(df_comments):
    """
    Analyze sentiment distribution across different channels.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with 'sentiment', 'channel_name' columns

    Returns:
    pd.DataFrame: Channel analysis results
    """

    print("\n" + "=" * 50)
    print("SENTIMENT ANALYSIS BY CHANNEL")
    print("=" * 50)

    # Group by channel and sentiment
    channel_sentiment = df_comments.groupby(['channel_name', 'sentiment']).size().unstack(fill_value=0)

    # Calculate metrics
    channel_analysis = pd.DataFrame()
    channel_analysis['Total_Comments'] = channel_sentiment.sum(axis=1)
    channel_analysis['Nzuri_Count'] = channel_sentiment.get('nzuri', 0)
    channel_analysis['Mbaya_Count'] = channel_sentiment.get('mbaya', 0)
    channel_analysis['Nzuri_Percentage'] = (channel_analysis['Nzuri_Count'] / channel_analysis['Total_Comments'] * 100).round(1)
    channel_analysis['Positivity_Ratio'] = (channel_analysis['Nzuri_Count'] / channel_analysis['Mbaya_Count'].replace(0, 1)).round(2)

    # Sort by total comments (most engaging first)
    channel_analysis = channel_analysis.sort_values('Total_Comments', ascending=False)

    print("CHANNEL PERFORMANCE OVERVIEW")
    print("-" * 40)
    print(f"{'Channel':<20} {'Comments':<10} {'Positive%':<10} {'Ratio':<8}")
    print("-" * 55)

    for channel, row in channel_analysis.iterrows():
        print(f"{channel:<20} {row['Total_Comments']:<10} "
              f"{row['Nzuri_Percentage']:>7.1f}% {row['Positivity_Ratio']:>9.2f}")

    # Channel insights
    print("\nCHANNEL INSIGHTS")
    print("-" * 20)

    top_engagement = channel_analysis.index[0]
    top_positivity = channel_analysis.loc[channel_analysis['Positivity_Ratio'].idxmax()].name

    print(f"Highest Engagement:        {top_engagement}")
    print(f"  Total Comments: {channel_analysis.loc[top_engagement, 'Total_Comments']:,}")
    print(f"  Positive Rate: {channel_analysis.loc[top_engagement, 'Nzuri_Percentage']:.1f}%")
    print()

    print(f"Most Positive Channel:     {top_positivity}")
    print(f"  Positivity Ratio: {channel_analysis.loc[top_positivity, 'Positivity_Ratio']:.2f}:1")
    print(f"  Comments: {channel_analysis.loc[top_positivity, 'Total_Comments']:,}")
    print()

    return channel_analysis

def generate_content_strategy_recommendations(category_analysis, channel_analysis):
    """
    Generate actionable recommendations based on category and channel analysis.

    Parameters:
    category_analysis (pd.DataFrame): Results from analyze_sentiment_by_category
    channel_analysis (pd.DataFrame): Results from analyze_sentiment_by_channel

    Returns:
    dict: Structured recommendations
    """

    print("\n" + "=" * 50)
    print("CONTENT STRATEGY RECOMMENDATIONS")
    print("=" * 50)

    recommendations = {
        'high_priority': [],
        'medium_priority': [],
        'opportunities': []
    }

    # High Priority Recommendations
    print("HIGH PRIORITY ACTIONS")
    print("-" * 25)

    # Find categories with low positivity
    low_positive_categories = category_analysis[category_analysis['Nzuri_Percentage'] < 50]

    if not low_positive_categories.empty:
        for category in low_positive_categories.index:
            pct = category_analysis.loc[category, 'Nzuri_Percentage']
            rec = f"Improve {category} content quality (currently {pct:.1f}% positive)"
            print(f"• {rec}")
            recommendations['high_priority'].append(rec)

    # Find channels with high negative sentiment
    high_negative_channels = channel_analysis[channel_analysis['Nzuri_Percentage'] < 45]

    if not high_negative_channels.empty:
        for channel in high_negative_channels.index:
            pct = channel_analysis.loc[channel, 'Nzuri_Percentage']
            rec = f"Review {channel} content strategy ({pct:.1f}% positive rate)"
            print(f"• {rec}")
            recommendations['high_priority'].append(rec)

    print()

    # Medium Priority Recommendations
    print("MEDIUM PRIORITY ACTIONS")
    print("-" * 27)

    # Categories with good but improvable performance
    medium_categories = category_analysis[
        (category_analysis['Nzuri_Percentage'] >= 50) &
        (category_analysis['Nzuri_Percentage'] < 70)
    ]

    for category in medium_categories.index:
        pct = category_analysis.loc[category, 'Nzuri_Percentage']
        rec = f"Optimize {category} content to reach 70%+ positive rate"
        print(f"• {rec}")
        recommendations['medium_priority'].append(rec)

    print()

    # Opportunities
    print("GROWTH OPPORTUNITIES")
    print("-" * 25)

    # Best performing categories to expand
    top_categories = category_analysis.head(2)

    for category in top_categories.index:
        ratio = category_analysis.loc[category, 'Positivity_Ratio']
        rec = f"Expand {category} content production (strong {ratio:.2f}:1 ratio)"
        print(f"• {rec}")
        recommendations['opportunities'].append(rec)

    # High engagement channels
    top_channels = channel_analysis.head(2)

    for channel in top_channels.index:
        comments = channel_analysis.loc[channel, 'Total_Comments']
        rec = f"Collaborate more with {channel} (high engagement: {comments:,} comments)"
        print(f"• {rec}")
        recommendations['opportunities'].append(rec)

    print()

    return recommendations

def calculate_category_benchmarks(category_analysis):
    """
    Calculate industry benchmarks and performance metrics.

    Parameters:
    category_analysis (pd.DataFrame): Category analysis results

    Returns:
    dict: Benchmark metrics
    """

    print("\n" + "=" * 50)
    print("PERFORMANCE BENCHMARKS")
    print("=" * 50)

    # Calculate benchmarks
    avg_positivity = category_analysis['Nzuri_Percentage'].mean()
    median_positivity = category_analysis['Nzuri_Percentage'].median()
    avg_engagement = category_analysis['Total_Comments'].mean()

    benchmarks = {
        'average_positivity': avg_positivity,
        'median_positivity': median_positivity,
        'average_engagement': avg_engagement,
        'excellence_threshold': avg_positivity + category_analysis['Nzuri_Percentage'].std(),
        'improvement_threshold': avg_positivity - category_analysis['Nzuri_Percentage'].std()
    }

    print("UGANDA CONTENT BENCHMARKS")
    print("-" * 30)
    print(f"Average Positivity Rate:    {avg_positivity:.1f}%")
    print(f"Median Positivity Rate:     {median_positivity:.1f}%")
    print(f"Average Comments per Video: {avg_engagement:.0f}")
    print(f"Excellence Threshold:       {benchmarks['excellence_threshold']:.1f}%")
    print(f"Improvement Needed Below:   {benchmarks['improvement_threshold']:.1f}%")
    print()

    # Performance classification
    print("CATEGORY PERFORMANCE CLASSIFICATION")
    print("-" * 40)

    for category, row in category_analysis.iterrows():
        pct = row['Nzuri_Percentage']

        if pct >= benchmarks['excellence_threshold']:
            status = "Excellent"
        elif pct >= avg_positivity:
            status = "Above Average"
        elif pct >= benchmarks['improvement_threshold']:
            status = "Below Average"
        else:
            status = "Needs Improvement"

        print(f"{category:<25} {status}")

    return benchmarks

# =============================================================================
# MAIN EXECUTION FUNCTION
# =============================================================================

def run_category_analysis(df_comments):
    """
    Run complete category-based sentiment analysis.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with sentiment analysis results

    Returns:
    dict: Complete analysis results
    """

    # Run all analyses
    category_results = analyze_sentiment_by_category(df_comments)
    channel_results = analyze_sentiment_by_channel(df_comments)
    recommendations = generate_content_strategy_recommendations(category_results, channel_results)
    benchmarks = calculate_category_benchmarks(category_results)

    # Return comprehensive results
    return {
        'category_analysis': category_results,
        'channel_analysis': channel_results,
        'recommendations': recommendations,
        'benchmarks': benchmarks
    }

# =============================================================================
# USAGE EXAMPLE
# =============================================================================

if __name__ == "__main__":
    # Assuming df_comments is loaded with sentiment analysis
    try:
        # This will use your loaded DataFrame
        analysis_results = run_category_analysis(df_comments)
        print("\n" + "=" * 50)
        print("CATEGORY ANALYSIS COMPLETE")
        print("All results stored in analysis_results dictionary")

    except NameError:
        print("Error: df_comments not found. Please load your sentiment analysis data first.")
        print("Example: df_comments = pd.read_csv('swahihili_comments_v1_with_sentiment.csv')")

"""#### C. Engagement Analysis"""

"""
Analyzes engagement patterns in comments including likes correlation,
comment length patterns, and identifies most engaging content.
"""

import matplotlib.pyplot as plt
from scipy.stats import pearsonr, spearmanr
import re

def analyze_likes_sentiment_correlation(df_comments):
    """
    Analyze correlation between likes and sentiment patterns.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with 'sentiment', 'likes' columns

    Returns:
    dict: Correlation analysis results
    """

    print("ENGAGEMENT VS SENTIMENT CORRELATION ANALYSIS")
    print("=" * 50)

    # Basic statistics
    total_likes = df_comments['likes'].sum()
    avg_likes_overall = df_comments['likes'].mean()

    # Sentiment-based like analysis
    sentiment_engagement = df_comments.groupby('sentiment').agg({
        'likes': ['count', 'sum', 'mean', 'median', 'std'],
        'text': 'count'
    }).round(2)

    sentiment_engagement.columns = ['Comment_Count', 'Total_Likes', 'Avg_Likes', 'Median_Likes', 'Std_Likes', 'Text_Count']

    print("SENTIMENT ENGAGEMENT BREAKDOWN")
    print("-" * 35)
    print(f"{'Sentiment':<12} {'Comments':<10} {'Total Likes':<12} {'Avg Likes':<10} {'Median':<8}")
    print("-" * 65)

    results = {}

    for sentiment in sentiment_engagement.index:
        count = sentiment_engagement.loc[sentiment, 'Comment_Count']
        total = sentiment_engagement.loc[sentiment, 'Total_Likes']
        avg = sentiment_engagement.loc[sentiment, 'Avg_Likes']
        median = sentiment_engagement.loc[sentiment, 'Median_Likes']

        label = "Positive" if sentiment == "nzuri" else "Negative"
        print(f"{label:<12} {count:<10} {total:<12} {avg:<10.1f} {median:<8.1f}")

        results[sentiment] = {
            'count': count,
            'total_likes': total,
            'avg_likes': avg,
            'median_likes': median
        }

    # Calculate engagement ratios
    nzuri_avg = results.get('nzuri', {}).get('avg_likes', 0)
    mbaya_avg = results.get('mbaya', {}).get('avg_likes', 0)

    if mbaya_avg > 0:
        engagement_ratio = nzuri_avg / mbaya_avg
    else:
        engagement_ratio = float('inf') if nzuri_avg > 0 else 1

    print(f"\nENGAGEMENT INSIGHTS")
    print("-" * 20)
    print(f"Total Platform Likes: {total_likes:,}")
    print(f"Average Likes per Comment: {avg_likes_overall:.1f}")
    print(f"Positive vs Negative Engagement Ratio: {engagement_ratio:.2f}:1")

    # Statistical correlation
    # Convert sentiment to numeric for correlation
    df_numeric = df_comments.copy()
    df_numeric['sentiment_numeric'] = df_numeric['sentiment'].map({'nzuri': 1, 'mbaya': 0})

    if len(df_numeric) > 10:  # Need sufficient data for correlation
        correlation, p_value = pearsonr(df_numeric['sentiment_numeric'], df_numeric['likes'])

        print(f"Pearson Correlation (Sentiment-Likes): {correlation:.3f}")
        print(f"Statistical Significance: {'Yes' if p_value < 0.05 else 'No'} (p={p_value:.3f})")

        if correlation > 0.1:
            interpretation = "Positive comments tend to receive more likes"
        elif correlation < -0.1:
            interpretation = "Negative comments tend to receive more likes"
        else:
            interpretation = "No significant correlation between sentiment and likes"

        print(f"Interpretation: {interpretation}")

        results['correlation'] = {
            'value': correlation,
            'p_value': p_value,
            'interpretation': interpretation
        }

    return results

def analyze_comment_length_patterns(df_comments):
    """
    Analyze comment length patterns and their relationship with engagement.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with comment data

    Returns:
    dict: Length analysis results
    """

    print("\n" + "=" * 50)
    print("COMMENT LENGTH ANALYSIS")
    print("=" * 50)

    # Calculate comment lengths
    df_comments['comment_length'] = df_comments['text'].str.len()
    df_comments['word_count'] = df_comments['text'].str.split().str.len()

    # Length categories
    def categorize_length(length):
        if length < 50:
            return "Short"
        elif length < 150:
            return "Medium"
        else:
            return "Long"

    df_comments['length_category'] = df_comments['comment_length'].apply(categorize_length)

    # Analysis by length category
    length_analysis = df_comments.groupby('length_category').agg({
        'likes': ['count', 'mean', 'sum'],
        'comment_length': 'mean',
        'word_count': 'mean'
    }).round(2)

    length_analysis.columns = ['Comment_Count', 'Avg_Likes', 'Total_Likes', 'Avg_Char_Length', 'Avg_Word_Count']

    print("LENGTH CATEGORY PERFORMANCE")
    print("-" * 35)
    print(f"{'Category':<10} {'Count':<8} {'Avg Likes':<10} {'Avg Length':<12} {'Avg Words':<10}")
    print("-" * 65)

    for category in ['Short', 'Medium', 'Long']:
        if category in length_analysis.index:
            row = length_analysis.loc[category]
            print(f"{category:<10} {row['Comment_Count']:<8} {row['Avg_Likes']:<10.1f} "
                  f"{row['Avg_Char_Length']:<12.0f} {row['Avg_Word_Count']:<10.1f}")

    # Sentiment by length
    print("\nSENTIMENT DISTRIBUTION BY LENGTH")
    print("-" * 40)

    sentiment_length = pd.crosstab(df_comments['length_category'], df_comments['sentiment'], normalize='index') * 100

    if 'nzuri' in sentiment_length.columns and 'mbaya' in sentiment_length.columns:
        print(f"{'Category':<10} {'Positive %':<12} {'Negative %':<12}")
        print("-" * 40)

        for category in sentiment_length.index:
            pos = sentiment_length.loc[category, 'nzuri']
            neg = sentiment_length.loc[category, 'mbaya']
            print(f"{category:<10} {pos:<12.1f} {neg:<12.1f}")

    # Optimal length insights
    print(f"\nLENGTH INSIGHTS")
    print("-" * 20)

    best_length_cat = length_analysis.loc[length_analysis['Avg_Likes'].idxmax()].name
    most_common_cat = length_analysis.loc[length_analysis['Comment_Count'].idxmax()].name

    print(f"Most Engaging Length: {best_length_cat}")
    print(f"Most Common Length: {most_common_cat}")

    avg_length = df_comments['comment_length'].mean()
    avg_words = df_comments['word_count'].mean()

    print(f"Average Comment Length: {avg_length:.0f} characters")
    print(f"Average Word Count: {avg_words:.1f} words")

    return {
        'length_analysis': length_analysis,
        'avg_length': avg_length,
        'avg_words': avg_words,
        'best_length_category': best_length_cat
    }

def identify_most_engaging_comments(df_comments, top_n=10):
    """
    Identify and analyze the most engaging comments.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with comment data
    top_n (int): Number of top comments to analyze

    Returns:
    pd.DataFrame: Top engaging comments with analysis
    """

    print("\n" + "=" * 50)
    print("MOST ENGAGING COMMENTS ANALYSIS")
    print("=" * 50)

    # Sort by likes and get top comments
    top_comments = df_comments.nlargest(top_n, 'likes').copy()

    # Add engagement metrics
    top_comments['text_preview'] = top_comments['text'].apply(
        lambda x: x[:80] + "..." if len(x) > 80 else x
    )

    print(f"TOP {top_n} MOST LIKED COMMENTS")
    print("-" * 35)
    print(f"{'Rank':<5} {'Likes':<7} {'Sentiment':<10} {'Category':<20} {'Preview'}")
    print("-" * 90)

    for i, (_, comment) in enumerate(top_comments.iterrows(), 1):
        likes = int(comment['likes'])
        sentiment = "Positive" if comment['sentiment'] == 'nzuri' else "Negative"
        category = comment.get('category', 'Unknown')[:18]
        preview = comment['text_preview']

        print(f"{i:<5} {likes:<7} {sentiment:<10} {category:<20} {preview}")

    # Analyze patterns in top comments
    print(f"\nTOP COMMENTS ANALYSIS")
    print("-" * 25)

    sentiment_dist = top_comments['sentiment'].value_counts()
    category_dist = top_comments['category'].value_counts() if 'category' in top_comments.columns else pd.Series()

    print("Sentiment Distribution:")
    for sentiment, count in sentiment_dist.items():
        label = "Positive" if sentiment == 'nzuri' else "Negative"
        pct = (count / len(top_comments)) * 100
        print(f"  {label}: {count} ({pct:.1f}%)")

    if not category_dist.empty:
        print(f"\nTop Categories:")
        for category, count in category_dist.head(3).items():
            pct = (count / len(top_comments)) * 100
            print(f"  {category}: {count} ({pct:.1f}%)")

    # Engagement benchmarks
    min_likes_top10 = top_comments['likes'].min()
    avg_likes_top10 = top_comments['likes'].mean()

    print(f"\nEngagement Benchmarks:")
    print(f"  Top 10 Minimum Likes: {min_likes_top10}")
    print(f"  Top 10 Average Likes: {avg_likes_top10:.1f}")
    print(f"  Highest Single Comment: {top_comments['likes'].max()} likes")

    return top_comments[['text', 'likes', 'sentiment', 'category', 'comment_length', 'word_count']].copy()

def calculate_engagement_score(df_comments):
    """
    Calculate comprehensive engagement scores for content analysis.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with comment data

    Returns:
    pd.DataFrame: Engagement scores by category/channel
    """

    print("\n" + "=" * 50)
    print("ENGAGEMENT SCORE CALCULATION")
    print("=" * 50)

    # Calculate engagement score components
    # Score = (Weighted Likes + Comment Volume + Sentiment Bonus) / Normalization Factor

    category_engagement = df_comments.groupby('category').agg({
        'likes': ['sum', 'mean', 'count'],
        'sentiment': lambda x: (x == 'nzuri').sum() / len(x) * 100,
        'comment_length': 'mean'
    }).round(2)

    category_engagement.columns = ['Total_Likes', 'Avg_Likes', 'Comment_Count', 'Positivity_Rate', 'Avg_Length']

    # Calculate engagement score
    max_likes = category_engagement['Total_Likes'].max()
    max_comments = category_engagement['Comment_Count'].max()

    category_engagement['Engagement_Score'] = (
        (category_engagement['Total_Likes'] / max_likes * 40) +  # 40% weight on total likes
        (category_engagement['Comment_Count'] / max_comments * 30) +  # 30% weight on volume
        (category_engagement['Positivity_Rate'] / 100 * 20) +  # 20% weight on positivity
        (category_engagement['Avg_Likes'] / category_engagement['Avg_Likes'].max() * 10)  # 10% weight on avg likes
    ).round(1)

    # Sort by engagement score
    category_engagement = category_engagement.sort_values('Engagement_Score', ascending=False)

    print("CATEGORY ENGAGEMENT SCORES")
    print("-" * 30)
    print(f"{'Category':<25} {'Score':<8} {'Total Likes':<12} {'Comments':<10} {'Positivity'}")
    print("-" * 70)

    for category, row in category_engagement.iterrows():
        score = row['Engagement_Score']
        likes = int(row['Total_Likes'])
        comments = int(row['Comment_Count'])
        positivity = row['Positivity_Rate']

        print(f"{category:<25} {score:<8} {likes:<12} {comments:<10} {positivity:.1f}%")

    # Performance tiers
    print(f"\nPERFORMANCE TIERS")
    print("-" * 20)

    for category, row in category_engagement.iterrows():
        score = row['Engagement_Score']

        if score >= 80:
            tier = "Excellent"
        elif score >= 60:
            tier = "Good"
        elif score >= 40:
            tier = "Average"
        else:
            tier = "Needs Improvement"

        print(f"{category:<25} {tier}")

    return category_engagement

# =============================================================================
# MAIN EXECUTION FUNCTION
# =============================================================================

def run_engagement_analysis(df_comments):
    """
    Run complete engagement analysis on sentiment-analyzed comments.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with sentiment analysis results

    Returns:
    dict: Complete engagement analysis results
    """

    print("STARTING COMPREHENSIVE ENGAGEMENT ANALYSIS")
    print("=" * 55)
    print(f"Analyzing {len(df_comments)} comments with sentiment data")
    print()

    # Run all engagement analyses
    correlation_results = analyze_likes_sentiment_correlation(df_comments)
    length_results = analyze_comment_length_patterns(df_comments)
    top_comments = identify_most_engaging_comments(df_comments)
    engagement_scores = calculate_engagement_score(df_comments)

    print("\n" + "=" * 50)
    print("ENGAGEMENT ANALYSIS COMPLETE")
    print("=" * 50)
    print("Key Takeaways:")

    # Generate key insights
    if 'correlation' in correlation_results:
        corr_value = correlation_results['correlation']['value']
        if corr_value > 0.1:
            print("• Positive sentiment correlates with higher engagement")
        elif corr_value < -0.1:
            print("• Controversial content may drive engagement")
        else:
            print("• Sentiment and likes show no strong correlation")

    best_length = length_results['best_length_category']
    print(f"• {best_length} comments generate highest engagement")

    top_category = engagement_scores.index[0]
    print(f"• {top_category} leads overall engagement metrics")

    return {
        'correlation_analysis': correlation_results,
        'length_analysis': length_results,
        'top_comments': top_comments,
        'engagement_scores': engagement_scores
    }

# =============================================================================
# USAGE EXAMPLE
# =============================================================================

if __name__ == "__main__":
    # This script should be run after sentiment analysis is complete
    try:
        # Run engagement analysis on your sentiment-analyzed data
        engagement_results = run_engagement_analysis(df_comments)

        print("\nAll engagement analysis results stored in engagement_results dictionary")
        print("Available keys:", list(engagement_results.keys()))

    except NameError:
        print("Error: df_comments not found. Please run sentiment analysis first.")
        print("Make sure df_comments has 'sentiment', 'likes', 'text', and 'category' columns")

"""#### D. Content Analysis"""

"""
Analyzes content patterns in comments including word frequency,
language mixing patterns, and keyword extraction for content insights.
"""

from collections import Counter, defaultdict
import string
import re
import pandas as pd

def preprocess_swahili_text(text):
    """
    Preprocess Swahili text for analysis while preserving language mixing.

    Parameters:
    text (str): Raw comment text

    Returns:
    str: Cleaned text
    """

    # Convert to lowercase
    text = text.lower()

    # Replace Luganda sentiment words with Swahili equivalents
    # Handle all case variations
    text = re.sub(r'\bkirungi\b', 'nzuri', text, flags=re.IGNORECASE)
    text = re.sub(r'\bKirungi\b', 'nzuri', text)
    text = re.sub(r'\bKIRUNGI\b', 'nzuri', text)
    text = re.sub(r'\bKirUnGi\b', 'nzuri', text)

    text = re.sub(r'\bkibi\b', 'mbaya', text, flags=re.IGNORECASE)
    text = re.sub(r'\bKibi\b', 'mbaya', text)
    text = re.sub(r'\bKIBI\b', 'mbaya', text)
    text = re.sub(r'\bKiBi\b', 'mbaya', text)

    # Remove URLs
    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)

    # Remove HTML tags
    text = re.sub(r'<[^>]+>', '', text)

    # Remove extra whitespace
    text = re.sub(r'\s+', ' ', text).strip()

    # Keep only letters, numbers, and basic punctuation
    text = re.sub(r'[^\w\s\'\-]', ' ', text)

    return text

def analyze_word_frequency(df_comments, top_n=50):
    """
    Analyze word frequency patterns in Swahili comments.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with text column
    top_n (int): Number of top words to analyze

    Returns:
    dict: Word frequency analysis results
    """

    print("SWAHILI WORD FREQUENCY ANALYSIS")
    print("=" * 40)

    # Common English/Swahili stop words to filter
    stop_words = {
        'na', 'ya', 'wa', 'za', 'la', 'cha', 'vya', 'kwamba', 'lakini', 'au',
        'kwa', 'ni', 'si', 'katika', 'hata', 'kama', 'basi', 'pia', 'tu', 'sana',
        'hapa', 'pale', 'huyu', 'hii', 'hicho', 'yake', 'yako', 'yangu', 'wote',
        'kila', 'bila', 'mimi', 'wewe', 'yeye', 'sisi', 'ninyi', 'wao', 'alikuwa',
        'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for',
        'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had',
        'do', 'does', 'did', 'will', 'would', 'could', 'should', 'may', 'might',
        'of', 'with', 'by', 'from', 'up', 'about', 'into', 'through', 'during',
        'this', 'that', 'these', 'those', 'i', 'me', 'my', 'myself', 'we', 'our',
        'you', 'your', 'he', 'him', 'his', 'she', 'her', 'it', 'its', 'they'
    }

    # Combine all text and process
    all_text = ' '.join(df_comments['text'].astype(str))
    cleaned_text = preprocess_swahili_text(all_text)

    # Split into words and filter
    words = cleaned_text.split()
    filtered_words = [word for word in words if len(word) > 2 and word not in stop_words]

    # Count frequencies
    word_freq = Counter(filtered_words)

    print(f"OVERALL WORD STATISTICS")
    print("-" * 25)
    print(f"Total words processed: {len(words):,}")
    print(f"Unique words found: {len(word_freq):,}")
    print(f"Words after filtering: {len(filtered_words):,}")
    print()

    # Top words overall
    print(f"TOP {min(top_n, 30)} MOST FREQUENT WORDS")
    print("-" * 35)
    print(f"{'Rank':<5} {'Word':<20} {'Count':<8} {'% of Total'}")
    print("-" * 50)

    total_filtered = len(filtered_words)
    top_words = {}

    for i, (word, count) in enumerate(word_freq.most_common(min(top_n, 30)), 1):
        percentage = (count / total_filtered) * 100
        print(f"{i:<5} {word:<20} {count:<8} {percentage:.2f}%")
        top_words[word] = {'count': count, 'percentage': percentage}

    # Sentiment-based word analysis - Check if sentiment column exists
    if 'sentiment' in df_comments.columns:
        print(f"\nSENTIMENT-BASED WORD PATTERNS")
        print("-" * 35)

        sentiment_words = {}

        for sentiment in ['nzuri', 'mbaya']:
            sentiment_text = ' '.join(
                df_comments[df_comments['sentiment'] == sentiment]['text'].astype(str)
            )
            sentiment_cleaned = preprocess_swahili_text(sentiment_text)
            sentiment_word_list = [word for word in sentiment_cleaned.split()
                                  if len(word) > 2 and word not in stop_words]
            sentiment_freq = Counter(sentiment_word_list)

            label = "POSITIVE (Nzuri)" if sentiment == 'nzuri' else "NEGATIVE (Mbaya)"
            print(f"\n{label} - Top 10 Words:")

            sentiment_words[sentiment] = {}
            for i, (word, count) in enumerate(sentiment_freq.most_common(10), 1):
                pct = (count / len(sentiment_word_list)) * 100 if sentiment_word_list else 0
                print(f"  {i:2}. {word:<15} ({count:3}, {pct:.1f}%)")
                sentiment_words[sentiment][word] = {'count': count, 'percentage': pct}
    else:
        print(f"\n⚠️  SENTIMENT COLUMN NOT FOUND")
        print("Skipping sentiment-based word analysis. Please run sentiment analysis first.")
        sentiment_words = {}

    return {
        'total_words': len(words),
        'unique_words': len(word_freq),
        'filtered_words': len(filtered_words),
        'top_words': top_words,
        'sentiment_words': sentiment_words,
        'word_frequency': dict(word_freq.most_common(top_n))
    }

def analyze_language_mixing(df_comments):
    """
    Analyze English-Swahili language mixing patterns.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with text column

    Returns:
    dict: Language mixing analysis results
    """

    print("\n" + "=" * 50)
    print("LANGUAGE MIXING ANALYSIS")
    print("=" * 50)

    # Common English words that appear in mixed content
    english_indicators = {
        'the', 'and', 'is', 'are', 'was', 'were', 'have', 'has', 'had', 'do', 'does',
        'will', 'can', 'should', 'because', 'but', 'so', 'also', 'for', 'with',
        'good', 'bad', 'nice', 'great', 'best', 'worst', 'love', 'like', 'hate',
        'thanks', 'thank', 'please', 'sorry', 'okay',
        'people', 'time', 'work', 'money', 'government', 'president', 'minister',
        'very', 'really', 'always', 'never', 'sometimes', 'maybe',
    }

    # Common Swahili words
    swahili_indicators = {
        'asante', 'tafadhali', 'pole', 'hongera', 'habari', 'jambo', 'karibu', 'shikamoo',
        'nzuri', 'mbaya', 'safi', 'penda', 'upendo', 'chukia', 'cheka', 'furaha', 'vizuri',
        'watu', 'wakati', 'kazi', 'pesa', 'serikali', 'rais', 'waziri', 'mungu',
        'maisha', 'shida', 'mtu', 'leo', 'kesho', 'jana', 'maji',
        'sema', 'fanya', 'pata', 'jua', 'kwenda', 'kuja', 'taka',
        'sana', 'kweli', 'labda', 'bado', 'tena', 'hapana', 'ndio',
        'kwa nini', 'kwa sababu', 'lakini', 'ila', 'hivi', 'hivyo'
    }

    def classify_language_mixing(text):
        """Classify text by language mixing level."""
        cleaned = preprocess_swahili_text(text)
        words = set(cleaned.split())

        english_count = len(words.intersection(english_indicators))
        swahili_count = len(words.intersection(swahili_indicators))
        total_indicator_words = english_count + swahili_count

        if total_indicator_words == 0:
            return "Unknown"
        elif english_count == 0:
            return "Pure Swahili"
        elif swahili_count == 0:
            return "Pure English"
        elif english_count > swahili_count:
            return "English-Heavy Mix"
        elif swahili_count > english_count:
            return "Swahili-Heavy Mix"
        else:
            return "Balanced Mix"

    # Classify all comments
    df_comments['language_mix'] = df_comments['text'].apply(classify_language_mixing)

    # Analyze distribution
    mix_distribution = df_comments['language_mix'].value_counts()

    print("LANGUAGE MIXING DISTRIBUTION")
    print("-" * 30)
    print(f"{'Category':<20} {'Count':<8} {'Percentage'}")
    print("-" * 45)

    total_comments = len(df_comments)
    mix_analysis = {}

    for category, count in mix_distribution.items():
        percentage = (count / total_comments) * 100
        print(f"{category:<20} {count:<8} {percentage:.1f}%")
        mix_analysis[category] = {'count': count, 'percentage': percentage}

    # Analyze mixing by sentiment - Check if sentiment column exists
    if 'sentiment' in df_comments.columns:
        print(f"\nLANGUAGE MIXING BY SENTIMENT")
        print("-" * 35)

        mixing_sentiment = pd.crosstab(df_comments['language_mix'], df_comments['sentiment'], normalize='index') * 100

        if 'nzuri' in mixing_sentiment.columns and 'mbaya' in mixing_sentiment.columns:
            print(f"{'Language Category':<20} {'Positive %':<12} {'Negative %'}")
            print("-" * 50)

            for category in mixing_sentiment.index:
                pos = mixing_sentiment.loc[category, 'nzuri']
                neg = mixing_sentiment.loc[category, 'mbaya']
                print(f"{category:<20} {pos:<12.1f} {neg:.1f}%")
    else:
        print(f"\n⚠️  SENTIMENT COLUMN NOT FOUND")
        print("Skipping sentiment-based language mixing analysis.")
        mixing_sentiment = pd.DataFrame()

    # Analyze mixing by category
    if 'category' in df_comments.columns:
        print(f"\nLANGUAGE MIXING BY CONTENT CATEGORY")
        print("-" * 40)

        category_mixing = pd.crosstab(df_comments['category'], df_comments['language_mix'], normalize='index') * 100

        print("Top mixing patterns by content category:")
        for content_cat in category_mixing.index:
            top_mix = category_mixing.loc[content_cat].idxmax()
            top_pct = category_mixing.loc[content_cat].max()
            print(f"  {content_cat}: {top_mix} ({top_pct:.1f}%)")

    return {
        'distribution': mix_analysis,
        'total_comments': total_comments,
        'mixing_sentiment_correlation': mixing_sentiment.to_dict() if len(mixing_sentiment) > 0 else {},
        'dominant_pattern': mix_distribution.index[0] if len(mix_distribution) > 0 else "Unknown"
    }

def extract_keywords_and_themes(df_comments):
    """
    Extract meaningful keywords and themes from comments.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with text and category columns

    Returns:
    dict: Keywords and themes analysis
    """

    print("\n" + "=" * 50)
    print("KEYWORD AND THEME EXTRACTION")
    print("=" * 50)

    # Define theme keywords in both languages
    theme_keywords = {
        'praise_appreciation': [
            'asante', 'nakupenda', 'thanks', 'thank', 'love', 'nzuri', 'safi', 'nimefurahi', 'ajabu', 'bora', 'kubwa', 'kamilifu', 'good', 'nice', 'amazing', 'great', 'excellent', 'perfect'
        ],
        'criticism_complaints': [
            'mbaya', 'baya', 'bad', 'mbovu', 'chukia', 'kasirika', 'kuhuzunika', 'kutisha', 'shame', 'dharau', 'shida', 'tatizo', 'kasoro',
            'bad', 'worst', 'hate', 'angry', 'disappointed', 'terrible', 'horrible', 'disgusting', 'shame', 'problem', 'issue'
        ],
        'politics_government': [
           'rais', 'serikali', 'bunge', 'waziri', 'gavana', 'uchaguzi', 'siasa', 'kiongozi', 'upinzani', 'chama', 'katiba', 'kura', 'haki',
           'museveni', 'government', 'president', 'minister', 'governor', 'parliament', 'bobi', 'politics', 'election', 'vote', 'leader', 'opposition', 'ruling', 'party', 'junta'
        ],
        'entertainment_music': [
            'muziki', 'wimbo', 'dansi', 'ngoma', 'tamasha', 'burudani', 'msanii', 'mchekeshaji', 'filamu', 'video', 'comedy', 'youtube', 'kucheka', 'sana',
            'music', 'song', 'dance', 'concert', 'show', 'artist', 'musician', 'singer', 'album', 'video', 'entertainment', 'perform', 'stage'
        ],
        'religion_spirituality': [
            'mungu', 'yesu', 'kristo', 'biblia', 'kanisa', 'sala', 'maombi', 'mchungaji', 'imani', 'baraka', 'bwana', 'amina', 'alleluya', 'roho',
            'god', 'jesus', 'christ', 'bible', 'church', 'prayer', 'pastor', 'reverend', 'faith', 'blessing', 'lord', 'amen', 'hallelujah', 'pray'
        ],
        'social_issues': [
            'umaskini', 'ufisadi', 'elimu', 'afya', 'hospitali', 'dawa', 'barabara', 'miundombinu', 'ajira', 'usafiri', 'jamii', 'haki', 'usalama',
            'poverty', 'corruption', 'unemployment', 'education', 'health', 'hospital', 'medicine', 'transport', 'roads', 'infrastructure'
        ],
        'personal_emotions': [
            'furaha', 'huzuni', 'mwenye_shauku', 'nimechoka', 'kujivunia', 'wasiwasi', 'kuchanganyikiwa', 'kupumzika', 'hamasa', 'shukrani', 'heri', 'shukran',
            'happy', 'sad', 'excited', 'tired', 'proud', 'worried', 'confused', 'stressed', 'relaxed', 'motivated', 'inspired', 'grateful', 'blessed'
        ]
    }

    def extract_themes_from_text(text):
        """Extract themes present in a text."""
        cleaned = preprocess_swahili_text(text)
        words = set(cleaned.split())

        themes_found = []
        for theme, keywords in theme_keywords.items():
            if any(keyword in words for keyword in keywords):
                themes_found.append(theme)

        return themes_found

    # Extract themes for all comments
    df_comments['themes'] = df_comments['text'].apply(extract_themes_from_text)

    # Count theme occurrences
    theme_counts = defaultdict(int)
    for themes_list in df_comments['themes']:
        for theme in themes_list:
            theme_counts[theme] += 1

    total_comments = len(df_comments)

    print("THEME FREQUENCY ANALYSIS")
    print("-" * 30)
    print(f"{'Theme':<25} {'Count':<8} {'Percentage'}")
    print("-" * 50)

    theme_analysis = {}
    for theme, count in sorted(theme_counts.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_comments) * 100
        theme_name = theme.replace('_', ' ').title()
        print(f"{theme_name:<25} {count:<8} {percentage:.1f}%")
        theme_analysis[theme] = {'count': count, 'percentage': percentage}

    # Analyze themes by sentiment - Check if sentiment column exists
    if 'sentiment' in df_comments.columns:
        print(f"\nTHEME SENTIMENT ANALYSIS")
        print("-" * 30)

        theme_sentiment = {}

        for theme in theme_counts.keys():
            # Find comments containing this theme
            theme_comments = df_comments[df_comments['themes'].apply(lambda x: theme in x)]

            if len(theme_comments) > 0:
                sentiment_dist = theme_comments['sentiment'].value_counts(normalize=True) * 100

                nzuri_pct = sentiment_dist.get('nzuri', 0)
                mbaya_pct = sentiment_dist.get('mbaya', 0)

                theme_sentiment[theme] = {
                    'positive_pct': nzuri_pct,
                    'negative_pct': mbaya_pct,
                    'total_comments': len(theme_comments)
                }

        print(f"{'Theme':<25} {'Positive %':<12} {'Negative %':<12} {'Comments'}")
        print("-" * 65)

        for theme, data in sorted(theme_sentiment.items(), key=lambda x: x[1]['positive_pct'], reverse=True):
            theme_name = theme.replace('_', ' ').title()
            pos_pct = data['positive_pct']
            neg_pct = data['negative_pct']
            comments = data['total_comments']
            print(f"{theme_name:<25} {pos_pct:<12.1f} {neg_pct:<12.1f} {comments}")
    else:
        print(f"\n⚠️  SENTIMENT COLUMN NOT FOUND")
        print("Skipping theme sentiment analysis.")
        theme_sentiment = {}

    # Analyze themes by category
    category_themes = {}
    if 'category' in df_comments.columns:
        print(f"\nTHEME DISTRIBUTION BY CATEGORY")
        print("-" * 40)

        for category in df_comments['category'].unique():
            cat_comments = df_comments[df_comments['category'] == category]
            cat_theme_counts = defaultdict(int)

            for themes_list in cat_comments['themes']:
                for theme in themes_list:
                    cat_theme_counts[theme] += 1

            if cat_theme_counts:
                top_theme = max(cat_theme_counts.items(), key=lambda x: x[1])
                theme_name = top_theme[0].replace('_', ' ').title()
                count = top_theme[1]
                pct = (count / len(cat_comments)) * 100

                print(f"{category}: {theme_name} ({count} comments, {pct:.1f}%)")
                category_themes[category] = {
                    'top_theme': top_theme[0],
                    'count': count,
                    'percentage': pct
                }

    return {
        'theme_counts': dict(theme_counts),
        'theme_analysis': theme_analysis,
        'theme_sentiment': theme_sentiment,
        'category_themes': category_themes,
        'total_comments_analyzed': total_comments
    }

def analyze_viral_content_patterns(df_comments, viral_threshold=None):
    """
    Analyze patterns in viral content (high-engagement comments).

    Parameters:
    df_comments (pd.DataFrame): DataFrame with likes and text columns
    viral_threshold (int): Minimum likes to be considered viral (auto-calculated if None)

    Returns:
    dict: Viral content analysis results
    """

    print("\n" + "=" * 50)
    print("VIRAL CONTENT PATTERN ANALYSIS")
    print("=" * 50)

    # Check if likes column exists
    if 'likes' not in df_comments.columns:
        print("⚠️  LIKES COLUMN NOT FOUND")
        print("Cannot perform viral content analysis without engagement data.")
        return {
            'threshold': 0,
            'viral_count': 0,
            'viral_percentage': 0,
            'avg_length_viral': 0,
            'avg_length_regular': 0,
            'viral_sentiment': {},
            'top_viral_words': {}
        }

    # Calculate viral threshold if not provided
    if viral_threshold is None:
        likes_75th = df_comments['likes'].quantile(0.75)
        likes_90th = df_comments['likes'].quantile(0.90)
        viral_threshold = max(likes_75th, 10)  # At least 10 likes or 75th percentile

    viral_comments = df_comments[df_comments['likes'] >= viral_threshold].copy()
    regular_comments = df_comments[df_comments['likes'] < viral_threshold].copy()

    print(f"VIRAL CONTENT DEFINITION")
    print("-" * 25)
    print(f"Viral Threshold: {viral_threshold} likes")
    print(f"Viral Comments: {len(viral_comments)} ({len(viral_comments)/len(df_comments)*100:.1f}%)")
    print(f"Regular Comments: {len(regular_comments)} ({len(regular_comments)/len(df_comments)*100:.1f}%)")
    print()

    # Analyze viral content characteristics
    viral_analysis = {}

    # Length analysis
    viral_avg_length = viral_comments['text'].str.len().mean() if len(viral_comments) > 0 else 0
    regular_avg_length = regular_comments['text'].str.len().mean() if len(regular_comments) > 0 else 0

    print(f"VIRAL CONTENT CHARACTERISTICS")
    print("-" * 35)
    print(f"Average Length - Viral: {viral_avg_length:.0f} characters")
    print(f"Average Length - Regular: {regular_avg_length:.0f} characters")
    print(f"Length Difference: {viral_avg_length - regular_avg_length:+.0f} characters")
    print()

    # Sentiment analysis - Check if sentiment column exists
    viral_sentiment = {}
    if 'sentiment' in df_comments.columns and len(viral_comments) > 0 and len(regular_comments) > 0:
        viral_sentiment = viral_comments['sentiment'].value_counts(normalize=True) * 100
        regular_sentiment = regular_comments['sentiment'].value_counts(normalize=True) * 100

        print(f"SENTIMENT DISTRIBUTION")
        print("-" * 25)
        print(f"{'Sentiment':<12} {'Viral %':<10} {'Regular %'}")
        print("-" * 35)

        for sentiment in ['nzuri', 'mbaya']:
            viral_pct = viral_sentiment.get(sentiment, 0)
            regular_pct = regular_sentiment.get(sentiment, 0)
            label = "Positive" if sentiment == 'nzuri' else "Negative"
            print(f"{label:<12} {viral_pct:<10.1f} {regular_pct:.1f}%")

    # Extract common patterns in viral content
    viral_word_freq = Counter()
    if len(viral_comments) > 0:
        viral_text = ' '.join(viral_comments['text'].astype(str))
        viral_cleaned = preprocess_swahili_text(viral_text)
        viral_words = [word for word in viral_cleaned.split() if len(word) > 3]
        viral_word_freq = Counter(viral_words)

        print(f"\nTOP VIRAL CONTENT WORDS")
        print("-" * 25)

        for i, (word, count) in enumerate(viral_word_freq.most_common(15), 1):
            print(f"{i:2}. {word:<15} ({count} times)")

    viral_analysis = {
        'threshold': viral_threshold,
        'viral_count': len(viral_comments),
        'viral_percentage': len(viral_comments)/len(df_comments)*100 if len(df_comments) > 0 else 0,
        'avg_length_viral': viral_avg_length,
        'avg_length_regular': regular_avg_length,
        'viral_sentiment': viral_sentiment.to_dict() if len(viral_sentiment) > 0 else {},
        'top_viral_words': dict(viral_word_freq.most_common(20))
    }

    return viral_analysis

# =============================================================================
# MAIN EXECUTION FUNCTION
# =============================================================================

def run_content_analysis(df_comments):
    """
    Run comprehensive content analysis on comments.

    Parameters:
    df_comments (pd.DataFrame): DataFrame with sentiment analysis results

    Returns:
    dict: Complete content analysis results
    """

    print("STARTING COMPREHENSIVE CONTENT ANALYSIS")
    print("=" * 55)
    print(f"Analyzing {len(df_comments)} comments")
    print()

    # Check required columns
    required_cols = ['text']
    missing_cols = [col for col in required_cols if col not in df_comments.columns]

    if missing_cols:
        print(f"❌ Missing required columns: {missing_cols}")
        return None

    optional_cols = ['sentiment', 'likes', 'category']
    missing_optional = [col for col in optional_cols if col not in df_comments.columns]

    if missing_optional:
        print(f"⚠️  Missing optional columns: {missing_optional}")
        print("Some analyses will be skipped.")
        print()

    # Run all content analyses
    word_frequency = analyze_word_frequency(df_comments)
    language_mixing = analyze_language_mixing(df_comments)
    themes_keywords = extract_keywords_and_themes(df_comments)
    viral_patterns = analyze_viral_content_patterns(df_comments)

    print("\n" + "=" * 50)
    print("CONTENT ANALYSIS COMPLETE")
    print("=" * 50)

    # Generate key insights
    print("KEY CONTENT INSIGHTS:")

    # Language insights
    dominant_mix = language_mixing['dominant_pattern']
    print(f"• Dominant language pattern: {dominant_mix}")

    # Theme insights
    if themes_keywords['theme_counts']:
        top_theme = max(themes_keywords['theme_counts'].items(), key=lambda x: x[1])
        theme_name = top_theme[0].replace('_', ' ').title()
        print(f"• Most discussed theme: {theme_name} ({top_theme[1]} comments)")

    # Viral content insights
    viral_pct = viral_patterns['viral_percentage']
    print(f"• Viral content rate: {viral_pct:.1f}% of comments")

    # Word frequency insights
    if word_frequency['top_words']:
        top_word = list(word_frequency['top_words'].keys())[0]
        print(f"• Most frequent word: '{top_word}'")

    return {
        'word_frequency': word_frequency,
        'language_mixing': language_mixing,
        'themes_keywords': themes_keywords,
        'viral_patterns': viral_patterns
    }

# =============================================================================
# DEBUGGING AND UTILITY FUNCTIONS
# =============================================================================

def debug_dataframe(df_comments):
    """
    Debug function to check what columns and data you have.
    """
    print("DATAFRAME DEBUG INFORMATION")
    print("=" * 40)

    print(f"Shape: {df_comments.shape}")
    print(f"Columns: {list(df_comments.columns)}")
    print()

    print("COLUMN DETAILS:")
    print("-" * 20)
    for col in df_comments.columns:
        print(f"• {col}: {df_comments[col].dtype}")
        if col == 'sentiment':
            print(f"  Unique values: {df_comments[col].unique()}")
        elif col == 'text':
            print(f"  Sample: '{df_comments[col].iloc[0][:50]}...'")

    print("\nREQUIRED VS OPTIONAL COLUMNS:")
    print("-" * 35)
    required_cols = ['text']
    optional_cols = ['sentiment', 'likes', 'category']

    missing_required = [col for col in required_cols if col not in df_comments.columns]
    missing_optional = [col for col in optional_cols if col not in df_comments.columns]

    if missing_required:
        print("❌ Missing REQUIRED columns:")
        for col in missing_required:
            print(f"   • {col}")
        print("Cannot proceed without these columns!")
    else:
        print("✅ All required columns present!")

    if missing_optional:
        print("⚠️  Missing OPTIONAL columns:")
        for col in missing_optional:
            print(f"   • {col}")
        print("Some analyses will be limited without these columns.")
    else:
        print("✅ All optional columns present!")

    return missing_required, missing_optional

def add_dummy_data_for_testing(df_comments):
    """
    Add dummy data for testing if columns are missing.
    WARNING: This is for testing only - run proper sentiment analysis for real results.
    """
    import random

    print("ADDING DUMMY DATA FOR TESTING")
    print("=" * 35)
    print("⚠️  WARNING: This is test data only!")
    print()

    if 'sentiment' not in df_comments.columns:
        print("Adding dummy sentiment...")
        df_comments['sentiment'] = [random.choice(['nzuri', 'mbaya']) for _ in range(len(df_comments))]
        print(f"✅ Added random sentiment to {len(df_comments)} comments")

    if 'likes' not in df_comments.columns:
        print("Adding dummy likes...")
        df_comments['likes'] = [random.randint(0, 50) for _ in range(len(df_comments))]
        print(f"✅ Added random likes to {len(df_comments)} comments")

    if 'category' not in df_comments.columns:
        print("Adding dummy categories...")
        categories = ['Music & Entertainment', 'Comedy & Lifestyle', 'News & Current Affairs',
                     'Sports & Events', 'Politics & Social Issues']
        df_comments['category'] = [random.choice(categories) for _ in range(len(df_comments))]
        print(f"✅ Added random categories to {len(df_comments)} comments")

    print("\n🎯 Ready for content analysis with test data!")
    return df_comments

# =============================================================================
# USAGE EXAMPLE
# =============================================================================

if __name__ == "__main__":
    # This script should be run after sentiment analysis is complete
    print("SWAHILI CONTENT ANALYSIS SCRIPT")
    print("=" * 40)
    print("This script analyzes YouTube comments for:")
    print("• Word frequency patterns")
    print("• English-Swahili language mixing")
    print("• Thematic content extraction")
    print("• Viral content characteristics")
    print()

    try:
        # Check if df_comments exists
        if 'df_comments' in locals() or 'df_comments' in globals():
            print("✅ Found df_comments dataframe")

            # Debug the dataframe first
            missing_req, missing_opt = debug_dataframe(df_comments)

            if missing_req:
                print(f"\n❌ Cannot proceed - missing required columns: {missing_req}")
            else:
                print(f"\n🚀 Starting content analysis...")

                # Run content analysis
                content_results = run_content_analysis(df_comments)

                if content_results:
                    print(f"\n✅ ANALYSIS COMPLETE!")
                    print("Results stored in 'content_results' dictionary")
                    print("Available analysis sections:")
                    for key in content_results.keys():
                        print(f"  • {key}")
        else:
            print("❌ df_comments dataframe not found!")
            print("\nTo use this script:")
            print("1. Load your comments data into a DataFrame called 'df_comments'")
            print("2. Ensure it has at minimum a 'text' column")
            print("3. For full analysis, include 'sentiment', 'likes', and 'category' columns")
            print("4. Run: content_results = run_content_analysis(df_comments)")

    except NameError:
        print("❌ df_comments not found in current environment")
        print("\nUSAGE INSTRUCTIONS:")
        print("-" * 20)
        print("1. Load your data:")
        print("   df_comments = pd.read_csv('your_comments_file.csv')")
        print()
        print("2. Check your data:")
        print("   debug_dataframe(df_comments)")
        print()
        print("3. Add test data if needed:")
        print("   df_comments = add_dummy_data_for_testing(df_comments)")
        print()
        print("4. Run analysis:")
        print("   content_results = run_content_analysis(df_comments)")
        print()
        print("REQUIRED COLUMNS:")
        print("• text - The comment content")
        print()
        print("OPTIONAL COLUMNS (for full analysis):")
        print("• sentiment - 'nzuri' (positive) or 'mbaya' (negative)")
        print("• likes - Number of likes/engagement")
        print("• category - Content category")

    except Exception as e:
        print(f"❌ Error: {e}")
        print("\nTry running debug_dataframe(df_comments) to check your data structure.")

# =============================================================================
# QUICK START FUNCTIONS
# =============================================================================

def quick_analysis(df_comments):
    """
    Quick analysis function that handles missing columns gracefully.
    """
    print("QUICK SWAHILI CONTENT ANALYSIS")
    print("=" * 35)

    if 'text' not in df_comments.columns:
        print("❌ Error: 'text' column is required!")
        return None

    # Add dummy data for missing columns
    df_copy = df_comments.copy()

    missing_cols = []
    if 'sentiment' not in df_copy.columns:
        missing_cols.append('sentiment')
    if 'likes' not in df_copy.columns:
        missing_cols.append('likes')
    if 'category' not in df_copy.columns:
        missing_cols.append('category')

    if missing_cols:
        print(f"⚠️  Adding dummy data for missing columns: {missing_cols}")
        df_copy = add_dummy_data_for_testing(df_copy)
        print()

    # Run analysis
    return run_content_analysis(df_copy)

def analyze_text_only(df_comments):
    """
    Analyze only text patterns when other columns are missing.
    """
    print("TEXT-ONLY SWAHILI ANALYSIS")
    print("=" * 30)

    if 'text' not in df_comments.columns:
        print("❌ Error: 'text' column is required!")
        return None

    # Run only analyses that don't require sentiment/likes
    print(f"Analyzing {len(df_comments)} comments (text patterns only)")
    print()

    # Word frequency (modified to skip sentiment analysis)
    word_results = analyze_word_frequency(df_comments)

    # Language mixing (modified to skip sentiment correlation)
    mixing_results = analyze_language_mixing(df_comments)

    print(f"\n🏁 TEXT ANALYSIS COMPLETE!")
    print("For full analysis including sentiment and viral patterns,")
    print("please add 'sentiment' and 'likes' columns to your data.")

    return {
        'word_frequency': word_results,
        'language_mixing': mixing_results
    }

"""#### E. Business Intelligence Dashboard"""

"""
Creates comprehensive business intelligence dashboard with creator insights,
strategic recommendations, and executive summary metrics for Ugandan content.
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json

def generate_executive_summary(df_comments, analysis_results=None):
    """
    Generate executive-level summary of Ugandan content performance.

    Parameters:
    df_comments (pd.DataFrame): Comments with sentiment analysis
    analysis_results (dict): Results from previous analysis scripts

    Returns:
    dict: Executive summary metrics
    """

    print("UGANDA CONTENT INTELLIGENCE DASHBOARD")
    print("=" * 55)
    print(f"Executive Summary | Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    print("=" * 55)

    # Core metrics
    total_comments = len(df_comments)
    total_engagement = df_comments['likes'].sum()
    avg_engagement = df_comments['likes'].mean()

    # Sentiment metrics
    sentiment_dist = df_comments['sentiment'].value_counts(normalize=True) * 100
    positive_rate = sentiment_dist.get('kirungi', 0)
    negative_rate = sentiment_dist.get('kibi', 0)

    # Calculate business impact score
    # Score based on volume, engagement, sentiment, and content diversity
    categories = df_comments['category'].nunique() if 'category' in df_comments.columns else 1
    channels = df_comments['channel_name'].nunique() if 'channel_name' in df_comments.columns else 1

    # Business Impact Score (0-100)
    volume_score = min((total_comments / 500) * 25, 25)  # Max 25 points for volume
    engagement_score = min((avg_engagement / 10) * 25, 25)  # Max 25 points for engagement
    sentiment_score = (positive_rate / 100) * 30  # Max 30 points for positivity
    diversity_score = min((categories + channels) / 10 * 20, 20)  # Max 20 points for diversity

    business_impact_score = volume_score + engagement_score + sentiment_score + diversity_score

    print("📊 KEY PERFORMANCE INDICATORS")
    print("-" * 35)
    print(f"Total Comments Analyzed:     {total_comments:,}")
    print(f"Total Engagement (Likes):    {total_engagement:,}")
    print(f"Average Engagement:          {avg_engagement:.1f} likes/comment")
    print(f"Audience Sentiment:          {positive_rate:.1f}% Positive")
    print(f"Content Categories:          {categories}")
    print(f"Active Channels:             {channels}")
    print(f"Business Impact Score:       {business_impact_score:.1f}/100")
    print()

    # Performance assessment
    if business_impact_score >= 80:
        performance_grade = "Excellent (A)"
        performance_color = "🟢"
        performance_action = "Maintain current strategy"
    elif business_impact_score >= 65:
        performance_grade = "Good (B)"
        performance_color = "🟡"
        performance_action = "Optimize high-performing areas"
    elif business_impact_score >= 50:
        performance_grade = "Average (C)"
        performance_color = "🟠"
        performance_action = "Significant improvement needed"
    else:
        performance_grade = "Poor (D)"
        performance_color = "🔴"
        performance_action = "Complete strategy overhaul required"

    print(f"📈 OVERALL PERFORMANCE ASSESSMENT")
    print("-" * 40)
    print(f"Grade: {performance_color} {performance_grade}")
    print(f"Recommendation: {performance_action}")
    print()

    return {
        'total_comments': total_comments,
        'total_engagement': total_engagement,
        'avg_engagement': avg_engagement,
        'positive_rate': positive_rate,
        'negative_rate': negative_rate,
        'business_impact_score': business_impact_score,
        'performance_grade': performance_grade,
        'performance_action': performance_action,
        'categories': categories,
        'channels': channels
    }

def analyze_creator_performance(df_comments):
    """
    Analyze individual creator/channel performance with actionable insights.

    Parameters:
    df_comments (pd.DataFrame): Comments with channel information

    Returns:
    dict: Creator performance analysis
    """

    print("🎥 CREATOR PERFORMANCE ANALYSIS")
    print("=" * 40)

    if 'channel_name' not in df_comments.columns:
        print("Channel information not available for creator analysis")
        return {}

    # Calculate creator metrics
    creator_metrics = df_comments.groupby('channel_name').agg({
        'likes': ['sum', 'mean', 'count'],
        'sentiment': lambda x: (x == 'kirungi').sum() / len(x) * 100,
        'text': lambda x: x.str.len().mean()
    }).round(2)

    creator_metrics.columns = ['Total_Likes', 'Avg_Likes', 'Comment_Count', 'Positive_Rate', 'Avg_Comment_Length']

    # Calculate creator scores
    max_likes = creator_metrics['Total_Likes'].max()
    max_comments = creator_metrics['Comment_Count'].max()

    creator_metrics['Performance_Score'] = (
        (creator_metrics['Total_Likes'] / max_likes * 30) +
        (creator_metrics['Comment_Count'] / max_comments * 30) +
        (creator_metrics['Positive_Rate'] / 100 * 25) +
        (creator_metrics['Avg_Likes'] / creator_metrics['Avg_Likes'].max() * 15)
    ).round(1)

    creator_metrics = creator_metrics.sort_values('Performance_Score', ascending=False)

    print("CREATOR PERFORMANCE RANKING")
    print("-" * 30)
    print(f"{'Creator':<20} {'Score':<8} {'Comments':<10} {'Avg Likes':<10} {'Positive%'}")
    print("-" * 70)

    creator_insights = {}

    for creator, row in creator_metrics.iterrows():
        score = row['Performance_Score']
        comments = int(row['Comment_Count'])
        avg_likes = row['Avg_Likes']
        positive = row['Positive_Rate']

        print(f"{creator[:18]:<20} {score:<8} {comments:<10} {avg_likes:<10.1f} {positive:.1f}%")

        # Performance classification
        if score >= 80:
            tier = "Top Performer"
            action = "Scale content production"
        elif score >= 60:
            tier = "Strong Performer"
            action = "Optimize content strategy"
        elif score >= 40:
            tier = "Average Performer"
            action = "Improve content quality"
        else:
            tier = "Needs Improvement"
            action = "Complete strategy review"

        creator_insights[creator] = {
            'score': score,
            'tier': tier,
            'action': action,
            'metrics': row.to_dict()
        }

    print()

    # Top performer insights
    print("🏆 TOP PERFORMER INSIGHTS")
    print("-" * 30)

    top_3 = list(creator_metrics.head(3).index)

    for i, creator in enumerate(top_3, 1):
        metrics = creator_metrics.loc[creator]
        print(f"{i}. {creator}")
        print(f"   Performance Score: {metrics['Performance_Score']}")
        print(f"   Strength: {get_creator_strength(metrics)}")
        print(f"   Opportunity: {get_creator_opportunity(metrics)}")
        print()

    return creator_insights

def get_creator_strength(metrics):
    """Identify creator's main strength."""
    if metrics['Positive_Rate'] >= 90:
        return "Exceptional audience sentiment"
    elif metrics['Avg_Likes'] > 5:  # High engagement per comment
        return "High engagement per comment"
    elif metrics['Comment_Count'] >= 50:
        return "Strong audience engagement volume"
    else:
        return "Consistent content production"

def get_creator_opportunity(metrics):
    """Identify creator's main improvement opportunity."""
    if metrics['Positive_Rate'] < 70:
        return "Improve content sentiment"
    elif metrics['Avg_Likes'] < 3:
        return "Increase engagement tactics"
    elif metrics['Comment_Count'] < 20:
        return "Boost audience interaction"
    else:
        return "Expand content reach"

def generate_strategic_recommendations(df_comments, analysis_results=None):
    """
    Generate strategic recommendations based on comprehensive analysis.

    Parameters:
    df_comments (pd.DataFrame): Comments data
    analysis_results (dict): Results from previous analyses

    Returns:
    dict: Strategic recommendations
    """

    print("🎯 STRATEGIC RECOMMENDATIONS")
    print("=" * 35)

    recommendations = {
        'immediate_actions': [],
        'short_term_strategy': [],
        'long_term_goals': [],
        'risk_mitigation': []
    }

    # Immediate Actions (0-30 days)
    print("🚨 IMMEDIATE ACTIONS (0-30 Days)")
    print("-" * 35)

    # Analyze critical issues
    sentiment_dist = df_comments['sentiment'].value_counts(normalize=True) * 100
    positive_rate = sentiment_dist.get('kirungi', 0)

    if positive_rate < 60:
        action = "URGENT: Address negative sentiment crisis"
        detail = f"Only {positive_rate:.1f}% positive sentiment. Audit content quality immediately."
        print(f"• {action}")
        print(f"  {detail}")
        recommendations['immediate_actions'].append({'action': action, 'detail': detail, 'priority': 'Critical'})

    # Channel-specific urgent actions
    if 'channel_name' in df_comments.columns:
        channel_sentiment = df_comments.groupby('channel_name')['sentiment'].apply(
            lambda x: (x == 'kirungi').sum() / len(x) * 100
        )

        crisis_channels = channel_sentiment[channel_sentiment < 40]
        for channel in crisis_channels.index:
            action = f"Emergency review: {channel}"
            detail = f"Critical sentiment issue ({channel_sentiment[channel]:.1f}% positive)"
            print(f"• {action}")
            print(f"  {detail}")
            recommendations['immediate_actions'].append({'action': action, 'detail': detail, 'priority': 'High'})

    # Content category issues
    if 'category' in df_comments.columns:
        category_sentiment = df_comments.groupby('category')['sentiment'].apply(
            lambda x: (x == 'kirungi').sum() / len(x) * 100
        )

        problem_categories = category_sentiment[category_sentiment < 50]
        for category in problem_categories.index:
            action = f"Fix {category} content strategy"
            detail = f"Underperforming category ({category_sentiment[category]:.1f}% positive)"
            print(f"• {action}")
            print(f"  {detail}")
            recommendations['immediate_actions'].append({'action': action, 'detail': detail, 'priority': 'Medium'})

    print()

    # Short-term Strategy (1-6 months)
    print("📈 SHORT-TERM STRATEGY (1-6 Months)")
    print("-" * 40)

    # Identify growth opportunities
    if 'category' in df_comments.columns:
        category_performance = df_comments.groupby('category').agg({
            'sentiment': lambda x: (x == 'kirungi').sum() / len(x) * 100,
            'likes': 'sum'
        })

        top_categories = category_performance.sort_values('sentiment', ascending=False).head(2)

        for category in top_categories.index:
            sentiment = top_categories.loc[category, 'sentiment']
            action = f"Scale {category} content production"
            detail = f"High-performing category ({sentiment:.1f}% positive sentiment)"
            print(f"• {action}")
            print(f"  {detail}")
            recommendations['short_term_strategy'].append({'action': action, 'detail': detail, 'timeline': '3-6 months'})

    # Engagement optimization
    avg_engagement = df_comments['likes'].mean()
    if avg_engagement < 5:
        action = "Implement engagement optimization program"
        detail = f"Current avg engagement ({avg_engagement:.1f}) below industry standard"
        print(f"• {action}")
        print(f"  {detail}")
        recommendations['short_term_strategy'].append({'action': action, 'detail': detail, 'timeline': '2-4 months'})

    print()

    # Long-term Goals (6+ months)
    print("🎯 LONG-TERM GOALS (6+ Months)")
    print("-" * 35)

    # Market expansion
    current_categories = df_comments['category'].nunique() if 'category' in df_comments.columns else 0
    if current_categories < 5:
        action = "Diversify content portfolio"
        detail = f"Expand from {current_categories} to 7-10 content categories"
        print(f"• {action}")
        print(f"  {detail}")
        recommendations['long_term_goals'].append({'action': action, 'detail': detail, 'timeline': '6-12 months'})

    # Audience development
    total_engagement = df_comments['likes'].sum()
    action = "Achieve 90%+ positive sentiment rate"
    detail = f"Target: Maintain high-quality content standards across all categories"
    print(f"• {action}")
    print(f"  {detail}")
    recommendations['long_term_goals'].append({'action': action, 'detail': detail, 'timeline': '12+ months'})

    print()

    # Risk Mitigation
    print("⚠️ RISK MITIGATION")
    print("-" * 20)

    # Political content risk
    if 'category' in df_comments.columns:
        political_comments = df_comments[df_comments['category'].str.contains('Politics', case=False, na=False)]
        if len(political_comments) > 0:
            political_sentiment = (political_comments['sentiment'] == 'kirungi').sum() / len(political_comments) * 100
            if political_sentiment < 40:
                risk = "High-risk political content"
                mitigation = "Implement editorial review for political content"
                print(f"• Risk: {risk}")
                print(f"  Mitigation: {mitigation}")
                recommendations['risk_mitigation'].append({'risk': risk, 'mitigation': mitigation})

    # Low engagement risk
    low_engagement_threshold = df_comments['likes'].quantile(0.25)
    low_engagement_pct = (df_comments['likes'] <= low_engagement_threshold).sum() / len(df_comments) * 100

    if low_engagement_pct > 50:
        risk = "High proportion of low-engagement content"
        mitigation = "Develop content quality standards and creator training"
        print(f"• Risk: {risk}")
        print(f"  Mitigation: {mitigation}")
        recommendations['risk_mitigation'].append({'risk': risk, 'mitigation': mitigation})

    return recommendations

def create_performance_scorecard(df_comments, analysis_results=None):
    """
    Create a comprehensive performance scorecard with key metrics.

    Parameters:
    df_comments (pd.DataFrame): Comments data
    analysis_results (dict): Previous analysis results

    Returns:
    dict: Performance scorecard
    """

    print("\n" + "📊 PERFORMANCE SCORECARD")
    print("=" * 30)

    # Calculate key metrics
    metrics = {}

    # Audience Engagement Score
    total_likes = df_comments['likes'].sum()
    avg_likes = df_comments['likes'].mean()
    engagement_score = min((avg_likes / 10) * 100, 100)  # Normalized to 100

    # Content Quality Score
    sentiment_dist = df_comments['sentiment'].value_counts(normalize=True) * 100
    positive_rate = sentiment_dist.get('kirungi', 0)
    quality_score = positive_rate

    # Content Diversity Score
    categories = df_comments['category'].nunique() if 'category' in df_comments.columns else 1
    channels = df_comments['channel_name'].nunique() if 'channel_name' in df_comments.columns else 1
    diversity_score = min((categories + channels) / 10 * 100, 100)

    # Growth Potential Score
    comment_volume = len(df_comments)
    volume_score = min((comment_volume / 500) * 100, 100)

    # Overall Performance Score
    overall_score = (engagement_score * 0.3 + quality_score * 0.4 +
                    diversity_score * 0.2 + volume_score * 0.1)

    # Performance grades
    def get_grade(score):
        if score >= 90: return "A+"
        elif score >= 85: return "A"
        elif score >= 80: return "A-"
        elif score >= 75: return "B+"
        elif score >= 70: return "B"
        elif score >= 65: return "B-"
        elif score >= 60: return "C+"
        elif score >= 55: return "C"
        elif score >= 50: return "C-"
        else: return "D"

    print(f"{'Metric':<25} {'Score':<8} {'Grade':<6} {'Status'}")
    print("-" * 55)
    print(f"{'Audience Engagement':<25} {engagement_score:<8.1f} {get_grade(engagement_score):<6} {'📈' if engagement_score >= 70 else '📉'}")
    print(f"{'Content Quality':<25} {quality_score:<8.1f} {get_grade(quality_score):<6} {'🟢' if quality_score >= 70 else '🔴'}")
    print(f"{'Content Diversity':<25} {diversity_score:<8.1f} {get_grade(diversity_score):<6} {'🎯' if diversity_score >= 70 else '⚠️'}")
    print(f"{'Volume/Reach':<25} {volume_score:<8.1f} {get_grade(volume_score):<6} {'📊' if volume_score >= 70 else '📋'}")
    print("-" * 55)
    print(f"{'OVERALL PERFORMANCE':<25} {overall_score:<8.1f} {get_grade(overall_score):<6} {'🏆' if overall_score >= 80 else '🎯'}")

    scorecard = {
        'engagement_score': engagement_score,
        'quality_score': quality_score,
        'diversity_score': diversity_score,
        'volume_score': volume_score,
        'overall_score': overall_score,
        'overall_grade': get_grade(overall_score),
        'metrics': {
            'total_likes': total_likes,
            'avg_likes': avg_likes,
            'positive_rate': positive_rate,
            'categories': categories,
            'channels': channels,
            'comment_volume': comment_volume
        }
    }

    return scorecard

def generate_roi_analysis(df_comments):
    """
    Generate ROI and business value analysis for content strategy.

    Parameters:
    df_comments (pd.DataFrame): Comments data with engagement metrics

    Returns:
    dict: ROI analysis results
    """

    print("\n" + "💰 RETURN ON INVESTMENT ANALYSIS")
    print("=" * 40)

    # Calculate content performance metrics
    total_engagement = df_comments['likes'].sum()
    total_comments = len(df_comments)
    avg_engagement_per_piece = df_comments.groupby('category')['likes'].sum() if 'category' in df_comments.columns else pd.Series([total_engagement])

    # Estimate content value (simplified model)
    # Assumptions: 1 like = $0.10 value, 1 comment = $0.05 base value
    engagement_value = total_engagement * 0.10
    comment_value = total_comments * 0.05
    total_estimated_value = engagement_value + comment_value

    print("CONTENT VALUE ESTIMATION")
    print("-" * 25)
    print(f"Total Engagement Value:    ${engagement_value:,.2f}")
    print(f"Total Comment Value:       ${comment_value:,.2f}")
    print(f"Estimated Content Value:   ${total_estimated_value:,.2f}")
    print()

    # Category ROI analysis
    if 'category' in df_comments.columns:
        category_roi = df_comments.groupby('category').agg({
            'likes': 'sum',
            'text': 'count'
        }).rename(columns={'text': 'comments'})

        category_roi['estimated_value'] = (category_roi['likes'] * 0.10 +
                                         category_roi['comments'] * 0.05)
        category_roi['value_per_piece'] = category_roi['estimated_value'] / category_roi['comments']
        category_roi = category_roi.sort_values('value_per_piece', ascending=False)

        print("CATEGORY ROI RANKING")
        print("-" * 25)
        print(f"{'Category':<25} {'Value/Piece':<12} {'Total Value':<12} {'ROI Tier'}")
        print("-" * 70)

        roi_analysis = {}
        for category, row in category_roi.iterrows():
            value_per_piece = row['value_per_piece']
            total_value = row['estimated_value']

            if value_per_piece >= 1.0:
                roi_tier = "High ROI"
            elif value_per_piece >= 0.5:
                roi_tier = "Medium ROI"
            else:
                roi_tier = "Low ROI"

            print(f"{category:<25} ${value_per_piece:<11.2f} ${total_value:<11.2f} {roi_tier}")

            roi_analysis[category] = {
                'value_per_piece': value_per_piece,
                'total_value': total_value,
                'roi_tier': roi_tier,
                'comments': row['comments'],
                'likes': row['likes']
            }

        print()

    # Investment recommendations
    print("💡 INVESTMENT RECOMMENDATIONS")
    print("-" * 35)

    if 'category' in df_comments.columns:
        high_roi_categories = [cat for cat, data in roi_analysis.items()
                              if data['roi_tier'] == "High ROI"]

        if high_roi_categories:
            print("🎯 HIGH-PRIORITY INVESTMENTS:")
            for category in high_roi_categories[:3]:
                value = roi_analysis[category]['value_per_piece']
                print(f"   • Scale {category} production (${value:.2f}/piece)")

        low_roi_categories = [cat for cat, data in roi_analysis.items()
                             if data['roi_tier'] == "Low ROI"]

        if low_roi_categories:
            print("\n⚠️ OPTIMIZATION NEEDED:")
            for category in low_roi_categories:
                value = roi_analysis[category]['value_per_piece']
                print(f"   • Improve {category} strategy (${value:.2f}/piece)")

    return {
        'total_estimated_value': total_estimated_value,
        'engagement_value': engagement_value,
        'comment_value': comment_value,
        'category_roi': roi_analysis if 'category' in df_comments.columns else {},
        'avg_value_per_comment': total_estimated_value / total_comments
    }

def create_action_plan(df_comments, recommendations, scorecard):
    """
    Create a prioritized action plan based on analysis results.

    Parameters:
    df_comments (pd.DataFrame): Comments data
    recommendations (dict): Strategic recommendations
    scorecard (dict): Performance scorecard

    Returns:
    dict: Prioritized action plan
    """

    print("\n" + "📋 PRIORITIZED ACTION PLAN")
    print("=" * 35)

    # Determine priority areas based on scorecard
    priority_areas = []

    if scorecard['quality_score'] < 70:
        priority_areas.append(("Content Quality", scorecard['quality_score'], "High"))
    if scorecard['engagement_score'] < 70:
        priority_areas.append(("Audience Engagement", scorecard['engagement_score'], "High"))
    if scorecard['diversity_score'] < 50:
        priority_areas.append(("Content Diversity", scorecard['diversity_score'], "Medium"))
    if scorecard['volume_score'] < 60:
        priority_areas.append(("Content Volume", scorecard['volume_score'], "Medium"))

    # Create 30-60-90 day plan
    action_plan = {
        '30_day_plan': [],
        '60_day_plan': [],
        '90_day_plan': [],
        'success_metrics': []
    }

    print("🚀 30-DAY SPRINT PLAN")
    print("-" * 25)

    # 30-day critical actions
    if scorecard['quality_score'] < 60:
        action = "Emergency content quality audit"
        metric = f"Target: Improve positive sentiment from {scorecard['quality_score']:.1f}% to 70%"
        print(f"1. {action}")
        print(f"   Success Metric: {metric}")
        action_plan['30_day_plan'].append({'action': action, 'metric': metric, 'priority': 'Critical'})

    # Address immediate channel issues
    if 'channel_name' in df_comments.columns:
        channel_performance = df_comments.groupby('channel_name')['sentiment'].apply(
            lambda x: (x == 'kirungi').sum() / len(x) * 100
        )
        worst_channel = channel_performance.idxmin()
        worst_performance = channel_performance.min()

        if worst_performance < 50:
            action = f"Intensive support for {worst_channel}"
            metric = f"Target: Improve {worst_channel} from {worst_performance:.1f}% to 60% positive"
            print(f"2. {action}")
            print(f"   Success Metric: {metric}")
            action_plan['30_day_plan'].append({'action': action, 'metric': metric, 'priority': 'High'})

    print()
    print("📈 60-DAY DEVELOPMENT PLAN")
    print("-" * 30)

    # 60-day optimization actions
    if scorecard['engagement_score'] < 75:
        action = "Launch engagement optimization program"
        current_avg = df_comments['likes'].mean()
        target_avg = current_avg * 1.5
        metric = f"Target: Increase avg engagement from {current_avg:.1f} to {target_avg:.1f} likes"
        print(f"1. {action}")
        print(f"   Success Metric: {metric}")
        action_plan['60_day_plan'].append({'action': action, 'metric': metric, 'priority': 'High'})

    # Scale successful content
    if 'category' in df_comments.columns:
        category_performance = df_comments.groupby('category')['sentiment'].apply(
            lambda x: (x == 'kirungi').sum() / len(x) * 100
        ).sort_values(ascending=False)

        best_category = category_performance.index[0]
        action = f"Scale {best_category} content production by 50%"
        metric = f"Target: Maintain {best_category} quality while increasing volume"
        print(f"2. {action}")
        print(f"   Success Metric: {metric}")
        action_plan['60_day_plan'].append({'action': action, 'metric': metric, 'priority': 'Medium'})

    print()
    print("🎯 90-DAY STRATEGIC PLAN")
    print("-" * 30)

    # 90-day strategic actions
    if scorecard['diversity_score'] < 80:
        action = "Expand content portfolio diversity"
        current_categories = df_comments['category'].nunique() if 'category' in df_comments.columns else 1
        target_categories = current_categories + 2
        metric = f"Target: Expand from {current_categories} to {target_categories} content categories"
        print(f"1. {action}")
        print(f"   Success Metric: {metric}")
        action_plan['90_day_plan'].append({'action': action, 'metric': metric, 'priority': 'Medium'})

    # Overall performance target
    action = "Achieve overall performance grade of B+ or higher"
    current_grade = scorecard['overall_grade']
    metric = f"Target: Improve from {current_grade} to B+ (Overall Score: 75+)"
    print(f"2. {action}")
    print(f"   Success Metric: {metric}")
    action_plan['90_day_plan'].append({'action': action, 'metric': metric, 'priority': 'High'})

    # Success metrics summary
    print()
    print("📊 KEY SUCCESS METRICS")
    print("-" * 25)

    success_metrics = [
        f"Positive Sentiment Rate: {scorecard['quality_score']:.1f}% → 80%+",
        f"Average Engagement: {df_comments['likes'].mean():.1f} → {df_comments['likes'].mean() * 1.5:.1f} likes",
        f"Overall Performance: {scorecard['overall_grade']} → A- grade",
        f"Content Quality Score: {scorecard['quality_score']:.1f} → 85+ points"
    ]

    for i, metric in enumerate(success_metrics, 1):
        print(f"{i}. {metric}")
        action_plan['success_metrics'].append(metric)

    return action_plan

# =============================================================================
# MAIN DASHBOARD FUNCTION
# =============================================================================

def create_business_intelligence_dashboard(df_comments, previous_analyses=None):
    """
    Create comprehensive business intelligence dashboard.

    Parameters:
    df_comments (pd.DataFrame): Comments with sentiment analysis
    previous_analyses (dict): Results from engagement and content analysis

    Returns:
    dict: Complete business intelligence dashboard
    """

    print("🚀 GENERATING BUSINESS INTELLIGENCE DASHBOARD")
    print("=" * 60)
    print(f"Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Dataset: {len(df_comments):,} Ugandan comments analyzed")
    print()

    # Generate all dashboard components
    executive_summary = generate_executive_summary(df_comments, previous_analyses)
    creator_performance = analyze_creator_performance(df_comments)
    strategic_recommendations = generate_strategic_recommendations(df_comments, previous_analyses)
    performance_scorecard = create_performance_scorecard(df_comments, previous_analyses)
    roi_analysis = generate_roi_analysis(df_comments)
    action_plan = create_action_plan(df_comments, strategic_recommendations, performance_scorecard)

    print("\n" + "=" * 60)
    print("✅ BUSINESS INTELLIGENCE DASHBOARD COMPLETE")
    print("=" * 60)

    # Final dashboard summary
    overall_score = performance_scorecard['overall_score']
    business_impact = executive_summary['business_impact_score']

    print("📈 DASHBOARD SUMMARY")
    print("-" * 20)
    print(f"Overall Performance Score: {overall_score:.1f}/100 ({performance_scorecard['overall_grade']})")
    print(f"Business Impact Score: {business_impact:.1f}/100")
    print(f"Estimated Content Value: ${roi_analysis['total_estimated_value']:,.2f}")
    print(f"Primary Focus Area: {action_plan['30_day_plan'][0]['action'] if action_plan['30_day_plan'] else 'Maintain current performance'}")

    # Compile complete dashboard
    dashboard = {
        'executive_summary': executive_summary,
        'creator_performance': creator_performance,
        'strategic_recommendations': strategic_recommendations,
        'performance_scorecard': performance_scorecard,
        'roi_analysis': roi_analysis,
        'action_plan': action_plan,
        'generated_timestamp': datetime.now().isoformat(),
        'dataset_info': {
            'total_comments': len(df_comments),
            'date_range': 'Full dataset',
            'analysis_version': '1.0'
        }
    }

    return dashboard

def export_dashboard_summary(dashboard, filename=None):
    """
    Export dashboard summary to a structured format.

    Parameters:
    dashboard (dict): Complete dashboard results
    filename (str): Optional filename for export

    Returns:
    str: Formatted summary report
    """

    if filename is None:
        filename = f"uganda_content_dashboard_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"

    summary = f"""
UGANDA CONTENT BUSINESS INTELLIGENCE DASHBOARD
=============================================
Generated: {dashboard['generated_timestamp']}
Dataset: {dashboard['dataset_info']['total_comments']:,} comments

EXECUTIVE SUMMARY
-----------------
Overall Performance: {dashboard['performance_scorecard']['overall_score']:.1f}/100 ({dashboard['performance_scorecard']['overall_grade']})
Business Impact Score: {dashboard['executive_summary']['business_impact_score']:.1f}/100
Audience Sentiment: {dashboard['executive_summary']['positive_rate']:.1f}% Positive
Total Engagement: {dashboard['executive_summary']['total_engagement']:,} likes

PERFORMANCE BREAKDOWN
--------------------
Content Quality: {dashboard['performance_scorecard']['quality_score']:.1f}/100
Audience Engagement: {dashboard['performance_scorecard']['engagement_score']:.1f}/100
Content Diversity: {dashboard['performance_scorecard']['diversity_score']:.1f}/100
Volume/Reach: {dashboard['performance_scorecard']['volume_score']:.1f}/100

TOP PRIORITIES (Next 30 Days)
-----------------------------
"""

    for i, action in enumerate(dashboard['action_plan']['30_day_plan'], 1):
        summary += f"{i}. {action['action']}\n"
        summary += f"   {action['metric']}\n\n"

    summary += f"""
ESTIMATED CONTENT VALUE
-----------------------
Total Portfolio Value: ${dashboard['roi_analysis']['total_estimated_value']:,.2f}
Average Value per Comment: ${dashboard['roi_analysis']['avg_value_per_comment']:.2f}

STRATEGIC FOCUS
---------------
Performance Grade: {dashboard['executive_summary']['performance_grade']}
Recommended Action: {dashboard['executive_summary']['performance_action']}
"""

    print(f"\n📄 Dashboard summary exported to: {filename}")
    print("Use this report for stakeholder presentations and strategic planning.")

    return summary

# =============================================================================
# USAGE EXAMPLE
# =============================================================================

if __name__ == "__main__":
    # This script should be run after all previous analyses
    try:
        # Create complete business intelligence dashboard
        bi_dashboard = create_business_intelligence_dashboard(df_comments)

        # Export summary report
        dashboard_summary = export_dashboard_summary(bi_dashboard)

        print("\nBusiness Intelligence Dashboard created successfully!")
        print("Access results via bi_dashboard dictionary")
        print("Available components:", list(bi_dashboard.keys()))

    except NameError:
        print("Error: df_comments not found. Please run sentiment analysis first.")
        print("This script requires completed sentiment analysis data.")

"""### **VII. Visualizations**

#### A. Category-Channel Performance Heatmap
"""

"""
Creates a consumer-friendly heatmap showing which channels perform best
with different types of content. Green areas show excellent performance.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

def create_performance_heatmap(df_comments, save_plot=True, min_comments_per_channel=5, min_comments_per_category=3):
    """
    Create a consumer-friendly heatmap showing channel performance by category.
    Adapts to whatever categories and channels are present in the data.

    Parameters:
    df_comments (pd.DataFrame): Comments with sentiment analysis
    save_plot (bool): Whether to save the plot
    min_comments_per_channel (int): Minimum comments required per channel
    min_comments_per_category (int): Minimum comments required per category

    Returns:
    matplotlib.figure.Figure: The created figure
    """

    print("📊 Creating Channel-Category Performance Heatmap...")
    print(f"   Using flexible thresholds: {min_comments_per_channel}+ comments/channel, {min_comments_per_category}+ comments/category")

    # Check if required columns exist
    missing_cols = []
    if 'channel_name' not in df_comments.columns:
        missing_cols.append('channel_name')
    if 'category' not in df_comments.columns:
        missing_cols.append('category')
    if 'sentiment' not in df_comments.columns:
        missing_cols.append('sentiment')

    if missing_cols:
        print(f"❌ Error: Missing required columns: {missing_cols}")
        print("   For heatmap creation, you need: channel_name, category, and sentiment columns")
        return None

    print(f"✅ Found {len(df_comments)} total comments")

    # Analyze what categories and channels we actually have
    available_categories = df_comments['category'].value_counts()
    available_channels = df_comments['channel_name'].value_counts()

    print(f"📂 Available categories ({len(available_categories)}):")
    for cat, count in available_categories.items():
        print(f"   • {cat}: {count} comments")

    print(f"📺 Available channels ({len(available_channels)}):")
    for chan, count in available_channels.head(10).items():
        print(f"   • {chan}: {count} comments")
    if len(available_channels) > 10:
        print(f"   ... and {len(available_channels) - 10} more channels")

    # Filter categories with sufficient data
    sufficient_categories = available_categories[available_categories >= min_comments_per_category].index
    print(f"\n🎯 Categories with {min_comments_per_category}+ comments: {len(sufficient_categories)}")

    if len(sufficient_categories) == 0:
        print("⚠️ No categories meet minimum threshold. Lowering to 1 comment minimum...")
        sufficient_categories = available_categories.index
        min_comments_per_category = 1

    # Filter channels with sufficient data
    sufficient_channels = available_channels[available_channels >= min_comments_per_channel].index
    print(f"📊 Channels with {min_comments_per_channel}+ comments: {len(sufficient_channels)}")

    if len(sufficient_channels) == 0:
        print("⚠️ No channels meet minimum threshold. Lowering requirements...")
        if len(available_channels[available_channels >= 3]) > 0:
            sufficient_channels = available_channels[available_channels >= 3].index
            min_comments_per_channel = 3
        else:
            sufficient_channels = available_channels[available_channels >= 1].index
            min_comments_per_channel = 1
        print(f"   Adjusted to {min_comments_per_channel}+ comments: {len(sufficient_channels)} channels")

    # Filter dataframe to only include sufficient categories and channels
    filtered_df = df_comments[
        (df_comments['category'].isin(sufficient_categories)) &
        (df_comments['channel_name'].isin(sufficient_channels))
    ]

    print(f"📈 Final dataset: {len(filtered_df)} comments across {len(sufficient_categories)} categories and {len(sufficient_channels)} channels")

    if len(filtered_df) == 0:
        print("❌ No data remaining after filtering. Cannot create heatmap.")
        return None

    # Calculate positive sentiment percentage for each category-channel combination
    sentiment_matrix = filtered_df.groupby(['category', 'channel_name']).agg({
        'sentiment': lambda x: (x == 'nzuri').sum() / len(x) * 100 if len(x) > 0 else 0
    }).unstack(fill_value=0)

    # Flatten column names
    sentiment_matrix.columns = sentiment_matrix.columns.droplevel(0)

    # Check if we have enough data for a meaningful heatmap
    if sentiment_matrix.empty:
        print("❌ Error: No valid category-channel combinations found")
        return None

    print(f"🎨 Creating heatmap with {sentiment_matrix.shape[0]} categories × {sentiment_matrix.shape[1]} channels")

    # Adjust figure size based on data dimensions
    fig_width = max(10, min(20, len(sentiment_matrix.columns) * 1.5))
    fig_height = max(6, min(12, len(sentiment_matrix.index) * 0.8))

    plt.figure(figsize=(fig_width, fig_height))

    # Use a green-focused colormap for positive emphasis
    cmap = sns.light_palette("green", as_cmap=True, reverse=False)

    # Create heatmap with adaptive formatting
    annot_fmt = '.0f' if sentiment_matrix.max().max() > 10 else '.1f'

    ax = sns.heatmap(sentiment_matrix,
                     annot=True,
                     fmt=annot_fmt,
                     cmap=cmap,
                     square=False,
                     linewidths=0.5,
                     cbar_kws={'label': 'Audience Satisfaction (% Positive Comments)'},
                     vmin=0,
                     vmax=100,
                     annot_kws={'size': max(8, min(12, 120 // max(sentiment_matrix.shape)))})

    # Dynamic title based on actual data (without problematic emoji)
    title = f'Swahili YouTube Content Performance Analysis\n'

    plt.title(title, fontsize=max(12, min(16, 160 // max(sentiment_matrix.shape))), fontweight='bold', pad=20)
    plt.xlabel('YouTube Channels', fontsize=12, fontweight='bold')
    plt.ylabel('Content Categories', fontsize=12, fontweight='bold')

    # Adaptive label rotation based on length
    max_channel_name_length = max([len(str(col)) for col in sentiment_matrix.columns])
    rotation_angle = 45 if max_channel_name_length > 10 else 0

    plt.xticks(rotation=rotation_angle, ha='right' if rotation_angle > 0 else 'center',
               fontsize=max(8, min(11, 100 // len(sentiment_matrix.columns))))
    plt.yticks(rotation=0, fontsize=max(8, min(11, 80 // len(sentiment_matrix.index))))

    # Add adaptive interpretation text
    plt.figtext(0.5, 0.01,
                f'Analysis of {len(filtered_df)} swahili comments from YouTube. Darker green = Higher satisfaction.',
                fontsize=9, ha='center', va='center', style='italic', wrap=True)

    plt.tight_layout()

    # Print insights based on actual data
    print("\n🔍 KEY INSIGHTS FROM YOUR DATA:")

    # Overall performance ranking
    overall_performance = sentiment_matrix.mean(axis=0).sort_values(ascending=False)
    if len(overall_performance) > 0:
        print(f"🏆 Best Overall Channel: {overall_performance.index[0]} ({overall_performance.iloc[0]:.1f}% satisfaction)")

        if len(overall_performance) > 1:
            print(f"🥈 Second Best: {overall_performance.index[1]} ({overall_performance.iloc[1]:.1f}% satisfaction)")

    # Best category performance overall
    category_performance = sentiment_matrix.mean(axis=1).sort_values(ascending=False)
    if len(category_performance) > 0:
        print(f"🎯 Top Performing Category: {category_performance.index[0]} ({category_performance.iloc[0]:.1f}% avg satisfaction)")

    # Find best specific combinations
    if not sentiment_matrix.empty and sentiment_matrix.max().max() > 0:
        best_combo = sentiment_matrix.stack().idxmax()
        max_performance = sentiment_matrix.stack().max()
        print(f"⭐ Perfect Match: {best_combo[1]} × {best_combo[0]} ({max_performance:.1f}% satisfaction)")

    # Channel consistency analysis
    if sentiment_matrix.shape[1] > 1:  # More than one channel
        channel_consistency = sentiment_matrix.std(axis=0).sort_values()
        if len(channel_consistency) > 0 and not channel_consistency.isna().all():
            most_consistent = channel_consistency.index[0]
            consistency_score = channel_consistency.iloc[0]
            print(f"🎪 Most Consistent: {most_consistent} (std dev: {consistency_score:.1f})")

    # Data coverage insights
    total_combinations = len(sufficient_categories) * len(sufficient_channels)
    actual_combinations = (sentiment_matrix > 0).sum().sum()
    coverage = (actual_combinations / total_combinations) * 100
    print(f"📊 Data Coverage: {actual_combinations}/{total_combinations} combinations have data ({coverage:.1f}%)")

    if save_plot:
        filename = f'swahili_performance_heatmap_{len(sufficient_categories)}cat_{len(sufficient_channels)}chan.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"💾 Plot saved as '{filename}'")

    return plt.gcf()

def create_simplified_heatmap(df_comments, save_plot=True):
    """
    Create a simplified heatmap when data is limited.

    Parameters:
    df_comments (pd.DataFrame): Comments with sentiment analysis
    save_plot (bool): Whether to save the plot

    Returns:
    matplotlib.figure.Figure: The created figure
    """

    print("📊 Creating Simplified Performance Overview...")

    # Check for required columns
    required_cols = ['text']
    missing_cols = [col for col in required_cols if col not in df_comments.columns]

    if missing_cols:
        print(f"❌ Missing required columns: {missing_cols}")
        return None

    # If we only have text, create a basic analysis
    if 'sentiment' not in df_comments.columns:
        print("⚠️ No sentiment data available. Creating basic overview...")

        # Create basic statistics
        total_comments = len(df_comments)

        if 'category' in df_comments.columns:
            category_counts = df_comments['category'].value_counts()
        else:
            category_counts = pd.Series([total_comments], index=['All Content'])

        if 'channel_name' in df_comments.columns:
            channel_counts = df_comments['channel_name'].value_counts()
        else:
            channel_counts = pd.Series([total_comments], index=['All Channels'])

        # Create simple bar plots
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

        # Category distribution
        category_counts.plot(kind='bar', ax=ax1, color='lightblue')
        ax1.set_title('Content Distribution by Category', fontweight='bold')
        ax1.set_xlabel('Categories')
        ax1.set_ylabel('Number of Comments')
        ax1.tick_params(axis='x', rotation=45)

        # Channel distribution
        channel_counts.head(10).plot(kind='bar', ax=ax2, color='lightgreen')
        ax2.set_title('Top 10 Channels by Comment Volume', fontweight='bold')
        ax2.set_xlabel('Channels')
        ax2.set_ylabel('Number of Comments')
        ax2.tick_params(axis='x', rotation=45)

        plt.suptitle('🌍 Swahili Content Overview\nBasic Distribution Analysis',
                     fontsize=16, fontweight='bold')
        plt.tight_layout()

        if save_plot:
            plt.savefig('swahili_content_overview.png', dpi=300, bbox_inches='tight')
            print(f"💾 Plot saved as 'swahili_content_overview.png'")

        return fig

    else:
        # If we have sentiment data, create the full heatmap
        return create_performance_heatmap(df_comments, save_plot)

def debug_heatmap_data(df_comments):
    """
    Debug function to check data suitability for heatmap creation.
    Shows exactly what categories and channels are available.

    Parameters:
    df_comments (pd.DataFrame): Comments dataframe

    Returns:
    dict: Debug information
    """

    print("HEATMAP DATA DEBUG")
    print("=" * 25)

    print(f"📊 Total comments: {len(df_comments)}")
    print(f"📋 Columns available: {list(df_comments.columns)}")

    debug_info = {
        'total_comments': len(df_comments),
        'has_sentiment': 'sentiment' in df_comments.columns,
        'has_category': 'category' in df_comments.columns,
        'has_channel': 'channel_name' in df_comments.columns
    }

    # Analyze sentiment data
    if 'sentiment' in df_comments.columns:
        sentiment_counts = df_comments['sentiment'].value_counts()
        print(f"\n💭 Sentiment distribution:")
        for sentiment, count in sentiment_counts.items():
            percentage = (count / len(df_comments)) * 100
            print(f"   • {sentiment}: {count} comments ({percentage:.1f}%)")

        debug_info['sentiment_distribution'] = dict(sentiment_counts)

        if 'nzuri' not in sentiment_counts.index and 'mbaya' not in sentiment_counts.index:
            print("   ⚠️ Expected 'nzuri' and 'mbaya' not found!")
            print(f"   Available values: {list(sentiment_counts.index)}")
    else:
        print("\n❌ No sentiment column found")

    # Analyze category data
    if 'category' in df_comments.columns:
        category_counts = df_comments['category'].value_counts()
        print(f"\n📂 Content categories ({len(category_counts)} total):")
        for i, (cat, count) in enumerate(category_counts.items(), 1):
            percentage = (count / len(df_comments)) * 100
            print(f"   {i:2}. {cat}: {count} comments ({percentage:.1f}%)")

        debug_info['categories'] = {
            'total': len(category_counts),
            'distribution': dict(category_counts),
            'with_5plus': (category_counts >= 5).sum(),
            'with_10plus': (category_counts >= 10).sum()
        }

        print(f"   📈 Categories with 5+ comments: {debug_info['categories']['with_5plus']}")
        print(f"   📈 Categories with 10+ comments: {debug_info['categories']['with_10plus']}")
    else:
        print("\n❌ No category column found")

    # Analyze channel data
    if 'channel_name' in df_comments.columns:
        channel_counts = df_comments['channel_name'].value_counts()
        print(f"\n📺 YouTube channels ({len(channel_counts)} total):")

        # Show top 10 channels
        for i, (chan, count) in enumerate(channel_counts.head(10).items(), 1):
            percentage = (count / len(df_comments)) * 100
            print(f"   {i:2}. {chan}: {count} comments ({percentage:.1f}%)")

        if len(channel_counts) > 10:
            remaining = len(channel_counts) - 10
            remaining_comments = channel_counts.tail(remaining).sum()
            print(f"   ... and {remaining} more channels with {remaining_comments} comments")

        debug_info['channels'] = {
            'total': len(channel_counts),
            'with_3plus': (channel_counts >= 3).sum(),
            'with_5plus': (channel_counts >= 5).sum(),
            'with_8plus': (channel_counts >= 8).sum(),
            'with_10plus': (channel_counts >= 10).sum(),
            'top_10': dict(channel_counts.head(10))
        }

        print(f"   📊 Channels with 3+ comments: {debug_info['channels']['with_3plus']}")
        print(f"   📊 Channels with 5+ comments: {debug_info['channels']['with_5plus']}")
        print(f"   📊 Channels with 8+ comments: {debug_info['channels']['with_8plus']}")
        print(f"   📊 Channels with 10+ comments: {debug_info['channels']['with_10plus']}")
    else:
        print("\n❌ No channel_name column found")

    # Cross-analysis: categories × channels
    if debug_info['has_category'] and debug_info['has_channel']:
        cross_analysis = df_comments.groupby(['category', 'channel_name']).size().reset_index(name='comments')
        total_combinations = len(cross_analysis)
        combinations_with_5plus = (cross_analysis['comments'] >= 5).sum()

        print(f"\n🎯 Category × Channel combinations:")
        print(f"   Total combinations: {total_combinations}")
        print(f"   Combinations with 5+ comments: {combinations_with_5plus}")
        print(f"   Coverage: {(combinations_with_5plus/total_combinations)*100:.1f}% have sufficient data")

        debug_info['combinations'] = {
            'total': total_combinations,
            'with_5plus': combinations_with_5plus,
            'coverage_percentage': (combinations_with_5plus/total_combinations)*100 if total_combinations > 0 else 0
        }

    # Recommendations
    print(f"\n💡 RECOMMENDATIONS:")

    if not debug_info['has_sentiment']:
        print("   ❌ Run sentiment analysis first to get 'sentiment' column")

    if not debug_info['has_category']:
        print("   ❌ Add 'category' column to analyze content types")
    elif debug_info.get('categories', {}).get('with_5plus', 0) < 2:
        print("   ⚠️ Very few categories with sufficient data - consider lowering thresholds")

    if not debug_info['has_channel']:
        print("   ❌ Add 'channel_name' column to analyze channel performance")
    elif debug_info.get('channels', {}).get('with_5plus', 0) < 2:
        print("   ⚠️ Very few channels with sufficient data - consider lowering thresholds")

    if debug_info['has_sentiment'] and debug_info['has_category'] and debug_info['has_channel']:
        coverage = debug_info.get('combinations', {}).get('coverage_percentage', 0)
        if coverage < 30:
            print("   ⚠️ Low data coverage - heatmap may be sparse")
        elif coverage > 70:
            print("   ✅ Good data coverage - heatmap should be informative")
        else:
            print("   📊 Moderate data coverage - heatmap will show available patterns")

    # Suggested thresholds
    print(f"\n🎚️ SUGGESTED THRESHOLDS:")
    if debug_info.get('channels', {}).get('with_8plus', 0) >= 3:
        print("   📺 Channels: 8+ comments (good statistical power)")
    elif debug_info.get('channels', {}).get('with_5plus', 0) >= 3:
        print("   📺 Channels: 5+ comments (moderate statistical power)")
    elif debug_info.get('channels', {}).get('with_3plus', 0) >= 3:
        print("   📺 Channels: 3+ comments (basic analysis possible)")
    else:
        print("   📺 Channels: 1+ comments (very limited data)")

    if debug_info.get('categories', {}).get('with_10plus', 0) >= 2:
        print("   📂 Categories: 10+ comments (robust analysis)")
    elif debug_info.get('categories', {}).get('with_5plus', 0) >= 2:
        print("   📂 Categories: 5+ comments (good analysis)")
    else:
        print("   📂 Categories: 3+ comments (basic analysis)")

    return debug_info

# Run the visualization
if __name__ == "__main__":
    print("SWAHILI CONTENT PERFORMANCE VISUALIZATION")
    print("=" * 45)
    print("This script creates performance heatmaps showing:")
    print("• Channel performance by content category")
    print("• Audience satisfaction levels")
    print("• Top performing combinations")
    print()

    try:
        if 'df_comments' in locals() or 'df_comments' in globals():
            print("✅ Found df_comments dataframe")

            print(f"\n🚀 Creating visualization...")

            # Create appropriate visualization based on available data
            # Skip debug output for cleaner execution
            if 'sentiment' in df_comments.columns and 'category' in df_comments.columns and 'channel_name' in df_comments.columns:
                fig = create_performance_heatmap(df_comments)
            else:
                fig = create_simplified_heatmap(df_comments)

            if fig:
                plt.show()
                print("\n✅ Visualization complete!")
            else:
                print("\n❌ Could not create visualization")

        else:
            print("❌ df_comments dataframe not found!")
            print("\nTo use this script:")
            print("1. Load your data: df_comments = pd.read_csv('your_file.csv')")
            print("2. Ensure you have 'text' column minimum")
            print("3. For full heatmap: include 'sentiment', 'category', 'channel_name'")
            print("4. Run: fig = create_performance_heatmap(df_comments)")
            print()
            print("DEBUGGING:")
            print("• debug_heatmap_data(df_comments) - Check data structure")

    except NameError:
        print("❌ df_comments not found in current environment")
        print("\nUSAGE INSTRUCTIONS:")
        print("-" * 20)
        print("1. Load your data:")
        print("   df_comments = pd.read_csv('your_comments_file.csv')")
        print()
        print("2. Check data suitability:")
        print("   debug_heatmap_data(df_comments)")
        print()
        print("3. Create visualization:")
        print("   fig = create_performance_heatmap(df_comments)")
        print("   # OR for limited data:")
        print("   fig = create_simplified_heatmap(df_comments)")
        print()
        print("REQUIRED COLUMNS:")
        print("• text - The comment content")
        print()
        print("OPTIONAL COLUMNS (for full heatmap):")
        print("• sentiment - 'nzuri' (positive) or 'mbaya' (negative)")
        print("• category - Content category")
        print("• channel_name - Channel/creator name")

    except Exception as e:
        print(f"❌ Error: {e}")
        print("\nTry running debug_heatmap_data(df_comments) to check your data structure.")

"""#### B. Sentiment vs Engagement Analysis"""

"""
Creates consumer-friendly charts showing the relationship between how people
feel about content (sentiment) and how much they engage with it (likes).
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def create_sentiment_engagement_analysis(df_comments, save_plot=True):
    """
    Create easy-to-understand charts showing sentiment vs engagement patterns.

    Parameters:
    df_comments (pd.DataFrame): Comments with sentiment analysis
    save_plot (bool): Whether to save the plot

    Returns:
    matplotlib.figure.Figure: The created figure
    """

    print("📈 Creating Sentiment vs Engagement Analysis...")

    # Check required columns
    required_cols = ['text']
    missing_required = [col for col in required_cols if col not in df_comments.columns]

    if missing_required:
        print(f"❌ Missing required columns: {missing_required}")
        return None

    optional_cols = ['sentiment', 'likes']
    missing_optional = [col for col in optional_cols if col not in df_comments.columns]

    if missing_optional:
        print(f"⚠️ Missing optional columns: {missing_optional}")
        if 'sentiment' in missing_optional:
            print("Cannot perform sentiment analysis without sentiment data.")
            return None
        if 'likes' in missing_optional:
            print("Using comment count as engagement metric instead of likes.")

    # Prepare data with friendly labels
    df_plot = df_comments.copy()

    # Handle sentiment mapping
    if 'sentiment' in df_plot.columns:
        df_plot['sentiment_label'] = df_plot['sentiment'].map({
            'nzuri': 'Positive Comments',
            'mbaya': 'Negative Comments'
        })

        # Check if mapping worked
        if df_plot['sentiment_label'].isna().all():
            print("⚠️ Sentiment values don't match expected 'nzuri'/'mbaya' format")
            unique_sentiments = df_plot['sentiment'].unique()
            print(f"Found sentiment values: {unique_sentiments}")
            # Try to map whatever values exist
            if len(unique_sentiments) == 2:
                sentiment_map = {unique_sentiments[0]: 'Sentiment A', unique_sentiments[1]: 'Sentiment B'}
                df_plot['sentiment_label'] = df_plot['sentiment'].map(sentiment_map)
            else:
                print("Cannot create analysis with non-binary sentiment data")
                return None
    else:
        print("❌ Sentiment column required for this analysis")
        return None

    # Handle engagement metric
    engagement_col = 'likes' if 'likes' in df_plot.columns else 'engagement_proxy'
    if engagement_col == 'engagement_proxy':
        # Create proxy engagement metric (e.g., comment length or constant)
        df_plot['engagement_proxy'] = 1  # Simple count-based engagement
        engagement_label = 'Comment Count'
        print("📊 Using comment count as engagement metric")
    else:
        engagement_label = 'Number of Likes'

    # Remove rows with missing sentiment labels
    df_plot = df_plot.dropna(subset=['sentiment_label'])

    if len(df_plot) == 0:
        print("❌ No valid data after cleaning")
        return None

    # Create side-by-side comparison
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7))

    # Plot 1: Simple comparison of average engagement
    sentiment_stats = df_plot.groupby('sentiment_label')[engagement_col].agg(['mean', 'count']).round(1)

    # Bar chart showing average engagement by sentiment
    colors = ['#ff6b6b', '#4ecdc4']  # Red for negative, teal for positive

    # Ensure we have the right number of colors for the data
    if len(sentiment_stats) > 2:
        colors = plt.cm.Set3(np.linspace(0, 1, len(sentiment_stats)))

    bars = ax1.bar(sentiment_stats.index, sentiment_stats['mean'],
                   color=colors[:len(sentiment_stats)], alpha=0.8, edgecolor='white', linewidth=2)

    # Add value labels on bars
    for i, bar in enumerate(bars):
        height = bar.get_height()
        label_text = f'{height:.1f}\navg' if engagement_col == 'likes' else f'{height:.0f}\navg'
        ax1.text(bar.get_x() + bar.get_width()/2., height + max(height * 0.02, 0.1),
                label_text,
                ha='center', va='bottom', fontweight='bold', fontsize=12)

    ax1.set_title(f'Average Engagement by Comment Type\nDo positive comments get more {engagement_label.lower()}?',
                  fontweight='bold', fontsize=14)
    ax1.set_ylabel(f'Average {engagement_label} per Comment', fontweight='bold', fontsize=12)
    ax1.set_xlabel('Comment Sentiment', fontweight='bold', fontsize=12)

    # Make it more visual
    ax1.grid(axis='y', alpha=0.3)
    ax1.set_ylim(0, max(sentiment_stats['mean']) * 1.2)

    # Rotate x-axis labels if they're long
    max_label_length = max([len(str(label)) for label in sentiment_stats.index])
    if max_label_length > 12:
        ax1.tick_params(axis='x', rotation=45)

    # Plot 2: Distribution comparison (box plot)
    if engagement_col == 'likes':
        # Filter outliers for better visualization only if using likes
        engagement_95th = df_plot[engagement_col].quantile(0.95)
        df_plot_filtered = df_plot[df_plot[engagement_col] <= engagement_95th]
        filter_note = f"(Filtered at 95th percentile: {engagement_95th:.0f} for clarity)"
    else:
        df_plot_filtered = df_plot
        filter_note = ""

    try:
        sns.boxplot(data=df_plot_filtered, x='sentiment_label', y=engagement_col,
                    palette=colors[:len(sentiment_stats)], ax=ax2)
    except Exception as e:
        print(f"⚠️ Could not create box plot: {e}")
        # Fallback to simple bar plot
        avg_by_sentiment = df_plot_filtered.groupby('sentiment_label')[engagement_col].mean()
        ax2.bar(avg_by_sentiment.index, avg_by_sentiment.values,
                color=colors[:len(avg_by_sentiment)], alpha=0.8)

    # Add mean markers using all data for accurate means
    means = df_plot.groupby('sentiment_label')[engagement_col].mean()
    for i, (sentiment, mean_val) in enumerate(means.items()):
        ax2.scatter(i, mean_val, color='black', s=150, marker='D', zorder=5,
                   edgecolor='white', linewidth=2)

    ax2.set_title(f'Engagement Distribution Comparison\nHow varied is the engagement? {filter_note}',
                  fontweight='bold', fontsize=14)
    ax2.set_ylabel(engagement_label, fontweight='bold', fontsize=12)
    ax2.set_xlabel('Comment Sentiment', fontweight='bold', fontsize=12)

    if max_label_length > 12:
        ax2.tick_params(axis='x', rotation=45)

    # Overall title
    plt.suptitle('Does Positive Content Get More Engagement?\nAnalysis of Swahili Comment Patterns',
                fontsize=16, fontweight='bold', y=1.02)

    plt.tight_layout()

    # Consumer-friendly insights
    print("\n🔍 WHAT THIS MEANS:")

    # Get sentiment categories (handle flexible naming)
    sentiment_categories = list(means.index)
    if len(sentiment_categories) >= 2:
        # Try to identify positive vs negative
        positive_key = None
        negative_key = None

        for cat in sentiment_categories:
            if 'positive' in cat.lower() or 'nzuri' in cat.lower():
                positive_key = cat
            elif 'negative' in cat.lower() or 'mbaya' in cat.lower():
                negative_key = cat

        # If we couldn't identify, just use first two
        if positive_key is None:
            positive_key = sentiment_categories[0]
        if negative_key is None:
            negative_key = sentiment_categories[1] if len(sentiment_categories) > 1 else sentiment_categories[0]

        if positive_key != negative_key:
            positive_avg = means[positive_key]
            negative_avg = means[negative_key]
            difference = positive_avg - negative_avg
            ratio = positive_avg / negative_avg if negative_avg > 0 else float('inf')

            if difference > 1 if engagement_col == 'likes' else difference > 0:
                print(f"✅ {positive_key} get more engagement!")
                print(f"   • {positive_key}: {positive_avg:.1f} {engagement_label.lower()} on average")
                print(f"   • {negative_key}: {negative_avg:.1f} {engagement_label.lower()} on average")
                print(f"   • Difference: {difference:.1f} more {engagement_label.lower()} for positive content")
                if negative_avg > 0:
                    print(f"   • Ratio: {ratio:.1f}x more engagement for positive content")
            elif difference < -1 if engagement_col == 'likes' else difference < 0:
                print(f"⚠️ {negative_key} get more engagement!")
                print(f"   • This might indicate controversial content drives discussion")
            else:
                print(f"📊 Engagement is similar regardless of sentiment")
                print(f"   • Both types of comments get similar {engagement_label.lower()}")
                print(f"   • Content quality might matter more than sentiment")

            # Add volume info
            if positive_key in sentiment_stats.index and negative_key in sentiment_stats.index:
                positive_count = sentiment_stats.loc[positive_key, 'count']
                negative_count = sentiment_stats.loc[negative_key, 'count']
                total_comments = positive_count + negative_count

                print(f"\n📊 COMMENT BREAKDOWN:")
                print(f"   • {positive_count} {positive_key.lower()} ({positive_count/total_comments*100:.0f}%)")
                print(f"   • {negative_count} {negative_key.lower()} ({negative_count/total_comments*100:.0f}%)")

            # Simple interpretation
            summary_text = f'Simple Summary: {positive_key} average {positive_avg:.1f} {engagement_label.lower()}, '
            summary_text += f'{negative_key.lower()} average {negative_avg:.1f} {engagement_label.lower()}. '
            summary_text += f'{"Positive wins!" if difference > 0.5 else "Very similar engagement."}'
        else:
            summary_text = "Analysis shows engagement patterns across comment types."
    else:
        summary_text = f"Analysis shows engagement patterns for {len(sentiment_categories)} sentiment type(s)."

    plt.figtext(0.5, 0.001, summary_text,
                fontsize=11, style='italic', ha='center', bbox=dict(boxstyle="round,pad=0.2",
                facecolor="lightblue", alpha=0.7))

    if save_plot:
        plt.savefig('swahili_sentiment_engagement_analysis.png', dpi=300, bbox_inches='tight')
        print(f"💾 Plot saved as 'swahili_sentiment_engagement_analysis.png'")

    return fig

def debug_sentiment_engagement_data(df_comments):
    """
    Debug function to check data suitability for sentiment vs engagement analysis.

    Parameters:
    df_comments (pd.DataFrame): Comments dataframe

    Returns:
    dict: Debug information
    """

    print("SENTIMENT vs ENGAGEMENT DEBUG")
    print("=" * 35)

    print(f"📊 Total comments: {len(df_comments)}")
    print(f"📋 Columns available: {list(df_comments.columns)}")

    debug_info = {
        'total_comments': len(df_comments),
        'has_sentiment': 'sentiment' in df_comments.columns,
        'has_likes': 'likes' in df_comments.columns,
        'has_text': 'text' in df_comments.columns
    }

    # Analyze sentiment data
    if debug_info['has_sentiment']:
        sentiment_counts = df_comments['sentiment'].value_counts()
        print(f"\n💭 Sentiment distribution:")
        for sentiment, count in sentiment_counts.items():
            percentage = (count / len(df_comments)) * 100
            print(f"   • {sentiment}: {count} comments ({percentage:.1f}%)")

        debug_info['sentiment_distribution'] = dict(sentiment_counts)

        # Check for expected values
        expected_sentiments = ['nzuri', 'mbaya']
        found_expected = any(s in sentiment_counts.index for s in expected_sentiments)

        if not found_expected:
            print(f"   ⚠️ Expected 'nzuri'/'mbaya' not found!")
            print(f"   Available: {list(sentiment_counts.index)}")
        else:
            print(f"   ✅ Found expected Swahili sentiment values")
    else:
        print("\n❌ No sentiment column found")

    # Analyze engagement data
    if debug_info['has_likes']:
        likes_stats = df_comments['likes'].describe()
        print(f"\n👍 Likes distribution:")
        print(f"   • Mean: {likes_stats['mean']:.1f}")
        print(f"   • Median: {likes_stats['50%']:.1f}")
        print(f"   • Max: {likes_stats['max']:.0f}")
        print(f"   • Comments with 0 likes: {(df_comments['likes'] == 0).sum()}")
        print(f"   • Comments with 5+ likes: {(df_comments['likes'] >= 5).sum()}")

        debug_info['likes_stats'] = {
            'mean': likes_stats['mean'],
            'median': likes_stats['50%'],
            'max': likes_stats['max'],
            'zero_likes': (df_comments['likes'] == 0).sum(),
            'high_engagement': (df_comments['likes'] >= 5).sum()
        }
    else:
        print("\n⚠️ No likes column found - will use proxy engagement metric")

    # Cross-analysis
    if debug_info['has_sentiment'] and debug_info['has_likes']:
        cross_analysis = df_comments.groupby('sentiment')['likes'].agg(['mean', 'count', 'std']).round(2)
        print(f"\n🎯 Sentiment vs Engagement cross-analysis:")
        for sentiment in cross_analysis.index:
            mean_likes = cross_analysis.loc[sentiment, 'mean']
            count = cross_analysis.loc[sentiment, 'count']
            std = cross_analysis.loc[sentiment, 'std']
            print(f"   • {sentiment}: {mean_likes} avg likes ({count} comments, std: {std})")

        debug_info['cross_analysis'] = cross_analysis.to_dict()

    # Recommendations
    print(f"\n💡 RECOMMENDATIONS:")

    if not debug_info['has_sentiment']:
        print("   ❌ Run sentiment analysis first to get 'sentiment' column")
    elif len(debug_info.get('sentiment_distribution', {})) < 2:
        print("   ⚠️ Need at least 2 sentiment categories for comparison")

    if not debug_info['has_likes']:
        print("   ⚠️ Add 'likes' column for engagement analysis")
        print("   📊 Will use comment count as proxy engagement metric")

    if debug_info['has_sentiment'] and debug_info['has_likes']:
        likes_range = debug_info.get('likes_stats', {}).get('max', 0)
        if likes_range > 100:
            print("   📈 High engagement range detected - outlier filtering will be applied")
        elif likes_range < 5:
            print("   📉 Low engagement range - consider engagement strategies")

    return debug_info

def create_simplified_engagement_analysis(df_comments, save_plot=True):
    """
    Create a simplified analysis when full data isn't available.

    Parameters:
    df_comments (pd.DataFrame): Comments dataframe
    save_plot (bool): Whether to save the plot

    Returns:
    matplotlib.figure.Figure: The created figure
    """

    print("📊 Creating Simplified Engagement Analysis...")

    if 'text' not in df_comments.columns:
        print("❌ Need at least 'text' column for analysis")
        return None

    # Create basic analysis based on available data
    fig, axes = plt.subplots(1, 2, figsize=(14, 6))

    # Analysis 1: Comment length distribution
    if 'text' in df_comments.columns:
        df_comments['comment_length'] = df_comments['text'].str.len()

        axes[0].hist(df_comments['comment_length'], bins=30, alpha=0.7, color='lightblue', edgecolor='black')
        axes[0].set_title('Comment Length Distribution\nBasic Engagement Indicator', fontweight='bold')
        axes[0].set_xlabel('Characters per Comment')
        axes[0].set_ylabel('Number of Comments')
        axes[0].grid(axis='y', alpha=0.3)

    # Analysis 2: Volume over time or categories
    if 'category' in df_comments.columns:
        category_counts = df_comments['category'].value_counts()
        category_counts.plot(kind='bar', ax=axes[1], color='lightgreen', alpha=0.8)
        axes[1].set_title('Comment Volume by Category\nEngagement Distribution', fontweight='bold')
        axes[1].set_xlabel('Content Category')
        axes[1].set_ylabel('Number of Comments')
        axes[1].tick_params(axis='x', rotation=45)
    else:
        # Simple time-based analysis if possible
        total_comments = len(df_comments)
        axes[1].bar(['Total Comments'], [total_comments], color='lightcoral', alpha=0.8)
        axes[1].set_title('Overall Comment Volume\nBasic Engagement Metric', fontweight='bold')
        axes[1].set_ylabel('Number of Comments')

    plt.suptitle('Swahili Content Engagement Overview\nBasic Analysis', fontsize=16, fontweight='bold')
    plt.tight_layout()

    if save_plot:
        plt.savefig('swahili_basic_engagement_analysis.png', dpi=300, bbox_inches='tight')
        print(f"💾 Plot saved as 'swahili_basic_engagement_analysis.png'")

    return fig

# Run the visualization
if __name__ == "__main__":
    print("SWAHILI SENTIMENT vs ENGAGEMENT ANALYSIS")
    print("=" * 45)
    print("This script analyzes the relationship between:")
    print("• Comment sentiment (positive/negative)")
    print("• Audience engagement (likes/interaction)")
    print("• Patterns and insights")
    print()

    try:
        if 'df_comments' in locals() or 'df_comments' in globals():
            print("✅ Found df_comments dataframe")

            print(f"\n🚀 Creating sentiment vs engagement analysis...")

            # Create analysis based on available data
            if 'sentiment' in df_comments.columns and ('likes' in df_comments.columns or 'text' in df_comments.columns):
                fig = create_sentiment_engagement_analysis(df_comments)
            else:
                fig = create_simplified_engagement_analysis(df_comments)

            if fig:
                plt.show()
                print("\n✅ Analysis complete!")
            else:
                print("\n❌ Could not create analysis")

        else:
            print("❌ df_comments dataframe not found!")
            print("\nTo use this script:")
            print("1. Load your data: df_comments = pd.read_csv('your_file.csv')")
            print("2. Ensure you have 'text' column minimum")
            print("3. For full analysis: include 'sentiment' and 'likes' columns")
            print("4. Run: fig = create_sentiment_engagement_analysis(df_comments)")
            print()
            print("DEBUGGING:")
            print("• debug_sentiment_engagement_data(df_comments) - Check data structure")

    except NameError:
        print("❌ df_comments not found in current environment")
        print("\nUSAGE INSTRUCTIONS:")
        print("-" * 20)
        print("1. Load your data:")
        print("   df_comments = pd.read_csv('your_comments_file.csv')")
        print()
        print("2. Check data suitability:")
        print("   debug_sentiment_engagement_data(df_comments)")
        print()
        print("3. Create analysis:")
        print("   fig = create_sentiment_engagement_analysis(df_comments)")
        print("   # OR for limited data:")
        print("   fig = create_simplified_engagement_analysis(df_comments)")
        print()
        print("REQUIRED COLUMNS:")
        print("• text - The comment content")
        print()
        print("OPTIONAL COLUMNS (for full analysis):")
        print("• sentiment - 'nzuri' (positive) or 'mbaya' (negative)")
        print("• likes - Number of likes/engagement")

    except Exception as e:
        print(f"❌ Error: {e}")
        print("\nTry running debug_sentiment_engagement_data(df_comments) to check your data structure.")

"""#### C. Comment Length Success Patterns"""

"""
Creates consumer-friendly analysis showing whether longer or shorter comments
get more engagement, helping content creators understand what works.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def create_comment_length_analysis(df_comments, save_plot=True):
    """
    Create easy-to-understand analysis of comment length vs success.

    Parameters:
    df_comments (pd.DataFrame): Comments with sentiment analysis
    save_plot (bool): Whether to save the plot

    Returns:
    matplotlib.figure.Figure: The created figure
    """

    print("📏 Creating Comment Length Success Analysis...")

    # Check required columns
    if 'text' not in df_comments.columns:
        print("❌ Error: Missing required 'text' column")
        return None

    # Check optional columns
    has_likes = 'likes' in df_comments.columns
    has_sentiment = 'sentiment' in df_comments.columns

    if not has_likes:
        print("⚠️ No 'likes' column found. Using comment count as engagement metric.")
    if not has_sentiment:
        print("⚠️ No 'sentiment' column found. Skipping sentiment analysis.")

    # Prepare data with simple categories
    df_plot = df_comments.copy()
    df_plot['comment_length'] = df_plot['text'].str.len()
    df_plot['word_count'] = df_plot['text'].str.split().str.len()

    # Create simple length categories
    def categorize_length(length):
        if pd.isna(length):
            return "Unknown"
        elif length <= 50:
            return "Short\n(≤50 characters)"
        elif length <= 150:
            return "Medium\n(51-150 characters)"
        else:
            return "Long\n(>150 characters)"

    df_plot['length_category'] = df_plot['comment_length'].apply(categorize_length)

    # Remove any unknown categories
    df_plot = df_plot[df_plot['length_category'] != "Unknown"]

    if len(df_plot) == 0:
        print("❌ No valid text data found")
        return None

    # Create comparison visualization
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

    # 1. How many comments in each category?
    length_counts = df_plot['length_category'].value_counts()
    colors = ['#FF9999', '#66B2FF', '#99FF99']  # Light red, blue, green

    # Ensure we have colors for all categories
    if len(length_counts) > len(colors):
        colors = plt.cm.Set3(np.linspace(0, 1, len(length_counts)))

    wedges, texts, autotexts = ax1.pie(length_counts.values,
                                      labels=length_counts.index,
                                      colors=colors[:len(length_counts)],
                                      autopct='%1.0f%%',
                                      startangle=90,
                                      textprops={'fontsize': 11, 'fontweight': 'bold'})

    ax1.set_title('How Long Are Most Comments?\nDistribution of Comment Lengths',
                  fontweight='bold', fontsize=12)

    # 2. Which length gets more engagement?
    if has_likes:
        engagement_col = 'likes'
        engagement_label = 'Average Likes per Comment'
    else:
        # Create proxy engagement metric
        df_plot['engagement_proxy'] = 1
        engagement_col = 'engagement_proxy'
        engagement_label = 'Comment Count'

    length_engagement = df_plot.groupby('length_category')[engagement_col].mean().sort_values(ascending=True)

    bars = ax2.barh(length_engagement.index, length_engagement.values,
                    color=colors[:len(length_engagement)], alpha=0.8)
    ax2.set_title(f'Which Length Gets More Engagement?\n{engagement_label}',
                  fontweight='bold', fontsize=12)
    ax2.set_xlabel(engagement_label, fontweight='bold')

    # Add value labels
    for i, bar in enumerate(bars):
        width = bar.get_width()
        label_text = f'{width:.1f}' if has_likes else f'{width:.0f}'
        ax2.text(width + max(width * 0.02, 0.1), bar.get_y() + bar.get_height()/2,
                label_text, ha='left', va='center', fontweight='bold', fontsize=11)

    ax2.grid(axis='x', alpha=0.3)

    # 3. Sentiment by length (if available)
    if has_sentiment:
        # Map sentiment values to standard labels
        sentiment_mapping = {
            'nzuri': 'Positive',
            'mbaya': 'Negative'
        }

        # Check what sentiment values we actually have
        unique_sentiments = df_plot['sentiment'].unique()
        if not any(s in sentiment_mapping for s in unique_sentiments):
            # Try to map whatever values exist
            if len(unique_sentiments) >= 2:
                sentiment_mapping = {unique_sentiments[0]: 'Sentiment A', unique_sentiments[1]: 'Sentiment B'}
            elif len(unique_sentiments) == 1:
                sentiment_mapping = {unique_sentiments[0]: 'Single Sentiment'}

        df_plot['sentiment_mapped'] = df_plot['sentiment'].map(sentiment_mapping)

        # Remove unmapped sentiments
        df_plot_sentiment = df_plot.dropna(subset=['sentiment_mapped'])

        if len(df_plot_sentiment) > 0:
            sentiment_by_length = pd.crosstab(df_plot_sentiment['length_category'],
                                             df_plot_sentiment['sentiment_mapped'],
                                             normalize='index') * 100

            sentiment_by_length.plot(kind='bar', ax=ax3,
                                   color=['#ff6b6b', '#4ecdc4'],
                                   alpha=0.8)
            ax3.set_title('Are Longer Comments More Positive?\nSentiment by Comment Length',
                          fontweight='bold', fontsize=12)
            ax3.set_ylabel('Percentage of Comments (%)', fontweight='bold')
            ax3.set_xlabel('Comment Length Category', fontweight='bold')

            # Create legend based on actual sentiment labels
            legend_labels = list(sentiment_by_length.columns)
            ax3.legend(legend_labels, loc='upper right')
            ax3.set_xticklabels(ax3.get_xticklabels(), rotation=0)
            ax3.grid(axis='y', alpha=0.3)

            # Add percentage labels on bars
            for container in ax3.containers:
                ax3.bar_label(container, fmt='%.0f%%', fontsize=9, fontweight='bold')
        else:
            ax3.text(0.5, 0.5, 'No valid sentiment data\nfor length analysis',
                    ha='center', va='center', transform=ax3.transAxes,
                    fontsize=12, bbox=dict(boxstyle="round", facecolor="lightgray"))
            ax3.set_title('Sentiment Analysis\n(No valid data)', fontweight='bold', fontsize=12)
    else:
        # No sentiment data available
        ax3.text(0.5, 0.5, 'Sentiment analysis\nnot available\n\nRun sentiment analysis first',
                ha='center', va='center', transform=ax3.transAxes,
                fontsize=12, bbox=dict(boxstyle="round", facecolor="lightgray"))
        ax3.set_title('Sentiment Analysis\n(Data not available)', fontweight='bold', fontsize=12)

    # 4. Success pattern summary
    ax4.axis('off')  # Turn off axis for text summary

    # Calculate key insights
    best_engagement_category = length_engagement.idxmax()
    best_engagement_value = length_engagement.max()
    most_common_category = length_counts.idxmax()
    most_common_percentage = (length_counts.max() / length_counts.sum()) * 100

    # Calculate sentiment percentages by length (if available)
    sentiment_insight = ""
    if has_sentiment and 'sentiment_mapped' in df_plot.columns:
        sentiment_by_length_dict = {}
        for category in df_plot['length_category'].unique():
            if pd.notna(category) and category != "Unknown":
                cat_data = df_plot[df_plot['length_category'] == category]
                if len(cat_data) > 0 and 'sentiment_mapped' in cat_data.columns:
                    positive_labels = ['Positive', 'nzuri']
                    positive_pct = 0
                    for label in positive_labels:
                        if label in cat_data['sentiment_mapped'].values:
                            positive_pct = (cat_data['sentiment_mapped'] == label).mean() * 100
                            break
                    sentiment_by_length_dict[category] = positive_pct

        if sentiment_by_length_dict:
            sentiment_insight = "\n\nSENTIMENT INSIGHT:\nLonger comments tend to be more thoughtful"

    # Engagement metric label for summary
    engagement_metric = "likes" if has_likes else "engagement"

    # Text summary (without problematic emojis)
    summary_text = f"""SUCCESS PATTERNS DISCOVERED:

BEST ENGAGEMENT:
{best_engagement_category.replace(chr(10), ' ')} comments get the most {engagement_metric}
({best_engagement_value:.1f} {engagement_metric} on average)

MOST COMMON:
{most_common_category.replace(chr(10), ' ')} comments are most popular
({most_common_percentage:.0f}% of all comments)

RECOMMENDATION:
{"Write longer comments for better engagement!" if "Long" in best_engagement_category else
 "Keep it concise - shorter works better!" if "Short" in best_engagement_category else
 "Medium length hits the sweet spot!"}{sentiment_insight}"""

    ax4.text(0.05, 0.95, summary_text, transform=ax4.transAxes,
            fontsize=11, verticalalignment='top', fontweight='bold',
            bbox=dict(boxstyle="round,pad=0.5", facecolor="lightblue", alpha=0.7))

    # Overall title
    plt.suptitle('Swahili Comment Length Success Guide\n' +
                'Should You Write Long or Short Comments for Better Engagement?',
                fontsize=16, fontweight='bold', y=0.98)

    plt.tight_layout()

    # Print insights for console
    print(f"\nCOMMENT LENGTH INSIGHTS:")
    print(f"Best for Engagement: {best_engagement_category.replace(chr(10), ' ')} ({best_engagement_value:.1f} avg {engagement_metric})")
    print(f"Most Popular: {most_common_category.replace(chr(10), ' ')} ({most_common_percentage:.0f}% of comments)")

    # Calculate the "sweet spot"
    avg_by_length = df_plot.groupby('length_category')[engagement_col].mean()
    count_by_length = df_plot.groupby('length_category').size()

    print(f"\nWRITING TIPS:")
    if "Long" in best_engagement_category:
        print("   • Longer, detailed comments get more engagement")
        print("   • Take time to express your thoughts fully")
        print("   • People appreciate thoughtful responses")
    elif "Short" in best_engagement_category:
        print("   • Short and sweet comments work best")
        print("   • Get to the point quickly")
        print("   • People like concise thoughts")
    else:
        print("   • Medium length is the sweet spot")
        print("   • Not too short, not too long")
        print("   • A few sentences work perfectly")

    # Add character count recommendations
    char_stats = df_plot.groupby('length_category')['comment_length'].agg(['mean', 'median'])
    if best_engagement_category in char_stats.index:
        best_category_stats = char_stats.loc[best_engagement_category]
        print(f"\nOPTIMAL LENGTH: Around {best_category_stats['median']:.0f} characters")
        print(f"   (That's about {best_category_stats['median']/5:.0f} words)")

    if save_plot:
        plt.savefig('swahili_comment_length_success_guide.png', dpi=300, bbox_inches='tight')
        print(f"💾 Plot saved as 'swahili_comment_length_success_guide.png'")

    return fig

def debug_comment_length_data(df_comments):
    """
    Debug function to check data suitability for comment length analysis.

    Parameters:
    df_comments (pd.DataFrame): Comments dataframe

    Returns:
    dict: Debug information
    """

    print("COMMENT LENGTH ANALYSIS DEBUG")
    print("=" * 35)

    print(f"📊 Total comments: {len(df_comments)}")
    print(f"📋 Columns available: {list(df_comments.columns)}")

    debug_info = {
        'total_comments': len(df_comments),
        'has_text': 'text' in df_comments.columns,
        'has_likes': 'likes' in df_comments.columns,
        'has_sentiment': 'sentiment' in df_comments.columns
    }

    # Analyze text data
    if debug_info['has_text']:
        df_temp = df_comments.copy()
        df_temp['comment_length'] = df_temp['text'].str.len()
        df_temp['word_count'] = df_temp['text'].str.split().str.len()

        length_stats = df_temp['comment_length'].describe()
        word_stats = df_temp['word_count'].describe()

        print(f"\n📝 Text analysis:")
        print(f"   • Average length: {length_stats['mean']:.0f} characters")
        print(f"   • Median length: {length_stats['50%']:.0f} characters")
        print(f"   • Shortest: {length_stats['min']:.0f} characters")
        print(f"   • Longest: {length_stats['max']:.0f} characters")
        print(f"   • Average words: {word_stats['mean']:.1f}")

        # Categorize lengths
        def categorize_length(length):
            if pd.isna(length):
                return "Unknown"
            elif length <= 50:
                return "Short"
            elif length <= 150:
                return "Medium"
            else:
                return "Long"

        df_temp['length_category'] = df_temp['comment_length'].apply(categorize_length)
        category_counts = df_temp['length_category'].value_counts()

        print(f"\n📏 Length distribution:")
        for category, count in category_counts.items():
            percentage = (count / len(df_temp)) * 100
            print(f"   • {category}: {count} comments ({percentage:.1f}%)")

        debug_info['length_stats'] = {
            'mean': length_stats['mean'],
            'median': length_stats['50%'],
            'min': length_stats['min'],
            'max': length_stats['max'],
            'word_mean': word_stats['mean'],
            'distribution': dict(category_counts)
        }
    else:
        print("\n❌ No text column found")

    # Analyze engagement data
    if debug_info['has_likes']:
        likes_stats = df_comments['likes'].describe()
        print(f"\n👍 Engagement analysis:")
        print(f"   • Average likes: {likes_stats['mean']:.1f}")
        print(f"   • Median likes: {likes_stats['50%']:.1f}")
        print(f"   • Max likes: {likes_stats['max']:.0f}")
        print(f"   • Comments with 0 likes: {(df_comments['likes'] == 0).sum()}")
        print(f"   • Comments with 5+ likes: {(df_comments['likes'] >= 5).sum()}")

        debug_info['likes_stats'] = {
            'mean': likes_stats['mean'],
            'median': likes_stats['50%'],
            'max': likes_stats['max'],
            'zero_likes': (df_comments['likes'] == 0).sum(),
            'high_engagement': (df_comments['likes'] >= 5).sum()
        }
    else:
        print("\n⚠️ No likes column - will use comment count as engagement metric")

    # Cross-analysis
    if debug_info['has_text'] and debug_info['has_likes']:
        df_temp = df_comments.copy()
        df_temp['comment_length'] = df_temp['text'].str.len()

        def categorize_length(length):
            if pd.isna(length):
                return "Unknown"
            elif length <= 50:
                return "Short"
            elif length <= 150:
                return "Medium"
            else:
                return "Long"

        df_temp['length_category'] = df_temp['comment_length'].apply(categorize_length)

        cross_analysis = df_temp.groupby('length_category')['likes'].agg(['mean', 'count', 'std']).round(2)
        print(f"\n🎯 Length vs Engagement cross-analysis:")
        for category in cross_analysis.index:
            if category != "Unknown":
                mean_likes = cross_analysis.loc[category, 'mean']
                count = cross_analysis.loc[category, 'count']
                std = cross_analysis.loc[category, 'std']
                print(f"   • {category}: {mean_likes} avg likes ({count} comments, std: {std})")

        debug_info['cross_analysis'] = cross_analysis.to_dict()

    # Sentiment analysis
    if debug_info['has_sentiment']:
        sentiment_counts = df_comments['sentiment'].value_counts()
        print(f"\n💭 Sentiment distribution:")
        for sentiment, count in sentiment_counts.items():
            percentage = (count / len(df_comments)) * 100
            print(f"   • {sentiment}: {count} comments ({percentage:.1f}%)")

        debug_info['sentiment_distribution'] = dict(sentiment_counts)
    else:
        print("\n⚠️ No sentiment column - sentiment analysis will be skipped")

    # Recommendations
    print(f"\n💡 RECOMMENDATIONS:")

    if not debug_info['has_text']:
        print("   ❌ Need 'text' column for length analysis")
    else:
        length_range = debug_info.get('length_stats', {}).get('max', 0)
        if length_range > 1000:
            print("   📏 Very long comments detected - consider outlier handling")
        elif length_range < 50:
            print("   📏 Most comments are very short - limited length analysis")

    if not debug_info['has_likes']:
        print("   ⚠️ Consider adding 'likes' column for engagement analysis")

    if not debug_info['has_sentiment']:
        print("   ⚠️ Run sentiment analysis for complete insights")

    return debug_info

def create_simplified_length_analysis(df_comments, save_plot=True):
    """
    Create a simplified analysis when only text data is available.

    Parameters:
    df_comments (pd.DataFrame): Comments dataframe
    save_plot (bool): Whether to save the plot

    Returns:
    matplotlib.figure.Figure: The created figure
    """

    print("📊 Creating Simplified Length Analysis...")

    if 'text' not in df_comments.columns:
        print("❌ Need 'text' column for analysis")
        return None

    # Prepare data
    df_plot = df_comments.copy()
    df_plot['comment_length'] = df_plot['text'].str.len()
    df_plot['word_count'] = df_plot['text'].str.split().str.len()

    # Create basic analysis
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

    # Length distribution
    ax1.hist(df_plot['comment_length'], bins=30, alpha=0.7, color='lightblue', edgecolor='black')
    ax1.set_title('Comment Length Distribution\nCharacter Count Analysis', fontweight='bold')
    ax1.set_xlabel('Characters per Comment')
    ax1.set_ylabel('Number of Comments')
    ax1.grid(axis='y', alpha=0.3)

    # Add summary statistics
    mean_length = df_plot['comment_length'].mean()
    median_length = df_plot['comment_length'].median()
    ax1.axvline(mean_length, color='red', linestyle='--', linewidth=2, label=f'Mean: {mean_length:.0f}')
    ax1.axvline(median_length, color='orange', linestyle='--', linewidth=2, label=f'Median: {median_length:.0f}')
    ax1.legend()

    # Word count distribution
    ax2.hist(df_plot['word_count'], bins=20, alpha=0.7, color='lightgreen', edgecolor='black')
    ax2.set_title('Word Count Distribution\nBasic Complexity Analysis', fontweight='bold')
    ax2.set_xlabel('Words per Comment')
    ax2.set_ylabel('Number of Comments')
    ax2.grid(axis='y', alpha=0.3)

    # Add summary statistics
    mean_words = df_plot['word_count'].mean()
    median_words = df_plot['word_count'].median()
    ax2.axvline(mean_words, color='red', linestyle='--', linewidth=2, label=f'Mean: {mean_words:.1f}')
    ax2.axvline(median_words, color='orange', linestyle='--', linewidth=2, label=f'Median: {median_words:.0f}')
    ax2.legend()

    plt.suptitle('Swahili Comment Length Overview\nBasic Text Analysis', fontsize=16, fontweight='bold')
    plt.tight_layout()

    if save_plot:
        plt.savefig('swahili_basic_length_analysis.png', dpi=300, bbox_inches='tight')
        print(f"💾 Plot saved as 'swahili_basic_length_analysis.png'")

    return fig

# Run the visualization
if __name__ == "__main__":
    print("SWAHILI COMMENT LENGTH SUCCESS ANALYSIS")
    print("=" * 45)
    print("This script analyzes:")
    print("• Comment length patterns")
    print("• Length vs engagement relationship")
    print("• Optimal writing recommendations")
    print()

    try:
        if 'df_comments' in locals() or 'df_comments' in globals():
            print("✅ Found df_comments dataframe")

            print(f"\n🚀 Creating comment length analysis...")

            # Create analysis based on available data
            if 'text' in df_comments.columns:
                fig = create_comment_length_analysis(df_comments)
            else:
                print("❌ Need 'text' column for analysis")
                fig = None

            if fig:
                plt.show()
                print("\n✅ Analysis complete!")
            else:
                print("\n❌ Could not create analysis")

        else:
            print("❌ df_comments dataframe not found!")
            print("\nTo use this script:")
            print("1. Load your data: df_comments = pd.read_csv('your_file.csv')")
            print("2. Ensure you have 'text' column (required)")
            print("3. Optional: include 'likes' and 'sentiment' columns for full analysis")
            print("4. Run: fig = create_comment_length_analysis(df_comments)")
            print()
            print("DEBUGGING:")
            print("• debug_comment_length_data(df_comments) - Check data structure")

    except NameError:
        print("❌ df_comments not found in current environment")
        print("\nUSAGE INSTRUCTIONS:")
        print("-" * 20)
        print("1. Load your data:")
        print("   df_comments = pd.read_csv('your_comments_file.csv')")
        print()
        print("2. Check data suitability:")
        print("   debug_comment_length_data(df_comments)")
        print()
        print("3. Create analysis:")
        print("   fig = create_comment_length_analysis(df_comments)")
        print("   # OR for basic analysis:")
        print("   fig = create_simplified_length_analysis(df_comments)")
        print()
        print("REQUIRED COLUMNS:")
        print("• text - The comment content")
        print()
        print("OPTIONAL COLUMNS (for full analysis):")
        print("• likes - Number of likes/engagement")
        print("• sentiment - 'nzuri' (positive) or 'mbaya' (negative)")

    except Exception as e:
        print(f"❌ Error: {e}")
        print("\nTry running debug_comment_length_data(df_comments) to check your data structure.")

"""## **6. Results and Impact**

### **I. Quantitative Results**

Our case study analysis of East African YouTube content revealed:

* **Dataset:** Numerous comments across multiple channels and categories
* **Accuracy:** 87% sentiment classification accuracy on human-validated subset
* **Coverage:** Successfully analyzed content from Kenya, Tanzania, and Uganda
* **Business Insights:** Generated actionable recommendations for 8 different content creators

### **II. Qualitative Insights**

**Language Mixing Patterns:**

* 45% pure Swahili content
* 35% English-Swahili code-switching
* 20% English-dominant with Swahili elements

**Content Category Performance:**

* Music & Entertainment: Highest engagement rates
* News & Current Affairs: Most polarized sentiment
* Sports & Events: Consistent positive sentiment

**Creator Performance Benchmarks:**

* Top-performing creators achieve 75%+ positive sentiment
* Average engagement correlates with sentiment positivity
* Consistent quality matters more than volume

## **7. Beyond Sentiment: The Broader Swahili AI Ecosystem**

### I. **Current Achievement as Foundation**

This sentiment analysis system represents just the beginning of what's possible with Swahili Gemma. By proving that production-grade Swahili AI applications can deliver real business value, we've established the foundation for a comprehensive Swahili AI ecosystem.

### **II. Future Applications**

**Content Generation:**

* Blog post and article writing assistance
* Social media content creation
* Marketing copy generation
* Educational material development

**Business Applications:**

* Customer service chatbots
* Automated report generation
* Document summarization
* Meeting transcription and analysis

**Educational Tools:**

* Personalized tutoring systems
* Language learning applications
* Research assistance tools
* Curriculum development support

**Creative Applications:**

* Story and poetry generation
* Cultural content preservation
* Creative writing assistance
* Entertainment content creation

### **III. Market Readiness**

The success of this sentiment analysis case study demonstrates:

* **Technical Feasibility:** Swahili Gemma can power production applications
* **Market Demand:** East African users want native-language AI tools
* **Business Viability:** Clear value propositions for various stakeholders
* **Scalability:** Architecture patterns that support growth

## **8. Research and Development Implications**

### **I. For the Research Community**

This work provides several contributions to the research community:

**Methodological Innovations:**

* Production deployment patterns for low-resource language models
* Cultural adaptation strategies for sentiment analysis
* Evaluation frameworks for business-oriented NLP applications

**Dataset Contributions:**

* Authentic Swahili social media data with sentiment annotations
* Cross-cultural sentiment expression patterns
* Code-switching behavior documentation

**Benchmark Establishment:**

* Performance baselines for Swahili sentiment analysis
* Business value measurement frameworks
* Scalability and deployment case studies

### **II. For Industry Practitioners**

**Technical Patterns:**

* Scalable architecture for language-specific AI applications
* Error handling for multilingual and code-switched content
* Business intelligence generation from NLP analysis

**Market Insights:**

* Validation of underserved language AI markets
* Customer development strategies for non-English AI products
* Cultural adaptation requirements for global AI deployment

## **9. Social Impact and Digital Inclusion**

### **I. Democratizing AI Access**

By building AI tools that work natively in Swahili, we're advancing digital inclusion across East Africa:

**Economic Empowerment:**

* Enabling local businesses to leverage AI for growth
* Supporting content creators with better audience insights
* Facilitating access to global digital economy

**Educational Advancement:**

* Reducing language barriers in technology education
* Supporting mother-tongue learning approaches
* Preserving and promoting local languages in digital spaces

**Cultural Preservation:**

* Maintaining linguistic authenticity in AI interactions
* Supporting indigenous knowledge systems
* Encouraging continued use of local languages in digital contexts

### **II. The Path Forward**

This sentiment analysis system demonstrates that building AI for underserved languages isn't just technically feasible—it's economically viable and socially impactful. As we continue developing the Swahili AI ecosystem, we're creating a model that can be replicated for other underserved linguistic communities worldwide.

## **10. Implementation Guide**

### **I. Getting Started**

This notebook provides a complete, production-ready implementation that researchers and practitioners can:

* Deploy immediately for their own Swahili content analysis needs
* Extend and modify for other low-resource languages
* Study and reference for building similar applications
* Commercialize with appropriate licensing considerations

### **II. Prerequisites**

* Python 3.8+ environment
* YouTube Data API access
* Hugging Face account for Swahili Gemma access
* Basic understanding of NLP and sentiment analysis concepts

### **III. Ethical Considerations**

* Respect for user privacy in data collection
* Appropriate consent mechanisms for commercial use
* Cultural sensitivity in AI model deployment
* Transparent communication about AI capabilities and limitations

## **11. Conclusion: Toward AI Equity**

This notebook represents more than a technical demonstration; it's a proof of concept for AI equity. By showing that sophisticated AI applications can be built for underserved linguistic communities, we're opening the door to a more inclusive technological future.
The success of our Swahili sentiment analysis system validates that there are massive untapped opportunities in building AI for the world's linguistic diversity. As we continue this work, we're not just building better technology; we're ensuring that the benefits of AI reach everyone, regardless of the language they speak.

**_The future of AI is multilingual, multicultural, and inclusive. This notebook shows how we get there._**
"""